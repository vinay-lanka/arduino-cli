{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arduino CLI is an all-in-one solution that provides builder, boards/library manager, uploader, discovery and many other tools needed to use any Arduino compatible board and platforms. Installation \u00b6 You have several options to install the latest version of the Arduino CLI on your system, see the installation page. Getting started \u00b6 Follow the Getting started guide to see how to use the most common CLI commands available. Using the gRPC interface \u00b6 The client_example folder contains a sample program that shows how to use gRPC interface of the CLI. Available services and messages are detailed in the gRPC reference pages.","title":"Documentation Home"},{"location":"#installation","text":"You have several options to install the latest version of the Arduino CLI on your system, see the installation page.","title":"Installation"},{"location":"#getting-started","text":"Follow the Getting started guide to see how to use the most common CLI commands available.","title":"Getting started"},{"location":"#using-the-grpc-interface","text":"The client_example folder contains a sample program that shows how to use gRPC interface of the CLI. Available services and messages are detailed in the gRPC reference pages.","title":"Using the gRPC interface"},{"location":"CONTRIBUTING/","text":"How to contribute \u00b6 First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. To propose improvements or fix a bug, feel free to submit a PR. Legal requirements \u00b6 Before we can accept your contributions you have to sign the Contributor License Agreement Prerequisites \u00b6 To build the Arduino CLI from sources you need the following tools to be available in your local enviroment: Go version 1.12 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests you will also need: A serial port with an Arduino device attached A working Python environment, version 3.5 or later If you're working on the gRPC interface you will also have to: download the protoc compiler run go get -U github.com/golang/protobuf/protoc-gen-go Building the source code \u00b6 From the project folder root, just run: task build The project uses Go modules so dependencies will be downloaded automatically; at the end of the build, you should find an arduino-cli executable in the same folder. Running the tests \u00b6 There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run unit tests: task test-unit To run integration tests (these will take some time and require special setup, see following paragraph): task test-integration Running only some tests \u00b6 By default, all tests from all go packages are run. To run only unit tests from one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./arduino/cores/packagemanager task test-unit Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name: TEST_REGEX='^TestTryBuild.*' task test-unit Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindBoardWithFQBN$' TARGETS=./arduino/cores/packagemanager task test-unit Integration tests \u00b6 Being a command line interface, Arduino CLI is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. On top of this, many Arduino CLI features involve communicating with external devices, most likely through a serial port, so unit tests can only go so far in giving us confidence that the code is working. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run Arduino CLI in a different process and assess the options are correctly understood and the output is what we expect. To run the full suite of integration tests you need an Arduino device attached to a serial port and a working Python environment. Chances are that you already have Python installed in your system, if this is not the case you can download the official distribution or use the package manager provided by your Operating System. Some dependencies need to be installed before running the tests and to avoid polluting your global Python enviroment with dependencies that might be only used by the Arduino CLI, you can use a virtual environment . There are many ways to manage virtual environments, for example you can use a productivity tool called hatch . First you need to install it (you might need to sudo the following command): pip3 install --user hatch Then you can create a virtual environment to be used while working on Arduino CLI: hatch env arduino-cli At this point the virtual environment was created and you need to make it active every time you open a new terminal session with the following command: hatch shell arduino-cli From now on, every package installed by Python will be confined to the arduino-cli virtual environment, so you can proceed installing the dependencies required with: pip install -r test/requirements.txt If the last step was successful, you should be able to run the tests with: task test-integration Working on docs \u00b6 Documentation consists of several Markdown files stored under the docs folder at the root of the repo. Some of those files are automatically generated in the CI pipeline that builds the documentation website so you won't find them in the git repository and you need to generate them locally. If you're working on docs and your changes are not trivial, you might want to preview the documentation website locally, before opening a Pull Request. To run the docs toolchain locally you need to have: Go version 1.12 or later Taskfile to help you run the most common tasks from the command line A working Python environment, version 3.5 or later Before running the toolchain, perform the following operations: go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc When working on docs, you can launch a command that will take care of generating the docs, build the static website and start a local server you can access with your browser to see a preview of your changes - to launch this command do: task docs:serve If you don't see any error, hit http://127.0.0.1:8000 with your browser. Pull Requests \u00b6 In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if it exists. Write tests for the code you wrote. Open your PR against the master branch. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. Your PR must pass all CI tests before we will merge it. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making. Additional settings \u00b6 If you need to push a commit that's only shipping documentation changes or example files, thus a complete no-op for the test suite, please start the commit message with the string [skip ci] to skip the build and give that slot to someone else who does need it. If your PR doesn't need to be included in the changelog, please start the PR title with the string [skip changelog]","title":"How to contribute"},{"location":"CONTRIBUTING/#how-to-contribute","text":"First of all, thanks for contributing! This document provides some basic guidelines for contributing to this repository. To propose improvements or fix a bug, feel free to submit a PR.","title":"How to contribute"},{"location":"CONTRIBUTING/#legal-requirements","text":"Before we can accept your contributions you have to sign the Contributor License Agreement","title":"Legal requirements"},{"location":"CONTRIBUTING/#prerequisites","text":"To build the Arduino CLI from sources you need the following tools to be available in your local enviroment: Go version 1.12 or later Taskfile to help you run the most common tasks from the command line If you want to run integration tests you will also need: A serial port with an Arduino device attached A working Python environment, version 3.5 or later If you're working on the gRPC interface you will also have to: download the protoc compiler run go get -U github.com/golang/protobuf/protoc-gen-go","title":"Prerequisites"},{"location":"CONTRIBUTING/#building-the-source-code","text":"From the project folder root, just run: task build The project uses Go modules so dependencies will be downloaded automatically; at the end of the build, you should find an arduino-cli executable in the same folder.","title":"Building the source code"},{"location":"CONTRIBUTING/#running-the-tests","text":"There are several checks and test suites in place to ensure the code works as expected and is written in a way that's consistent across the whole codebase. To avoid pushing changes that will cause the CI system to fail, you can run most of the tests locally. To ensure code style is consistent, run: task check To run unit tests: task test-unit To run integration tests (these will take some time and require special setup, see following paragraph): task test-integration","title":"Running the tests"},{"location":"CONTRIBUTING/#running-only-some-tests","text":"By default, all tests from all go packages are run. To run only unit tests from one or more specific packages, you can set the TARGETS environment variable, e.g.: TARGETS=./arduino/cores/packagemanager task test-unit Alternatively, to run only some specific test(s), you can specify a regex to match against the test function name: TEST_REGEX='^TestTryBuild.*' task test-unit Both can be combined as well, typically to run only a specific test: TEST_REGEX='^TestFindBoardWithFQBN$' TARGETS=./arduino/cores/packagemanager task test-unit","title":"Running only some tests"},{"location":"CONTRIBUTING/#integration-tests","text":"Being a command line interface, Arduino CLI is heavily interactive and it has to stay consistent in accepting the user input and providing the expected output and proper exit codes. On top of this, many Arduino CLI features involve communicating with external devices, most likely through a serial port, so unit tests can only go so far in giving us confidence that the code is working. For these reasons, in addition to regular unit tests the project has a suite of integration tests that actually run Arduino CLI in a different process and assess the options are correctly understood and the output is what we expect. To run the full suite of integration tests you need an Arduino device attached to a serial port and a working Python environment. Chances are that you already have Python installed in your system, if this is not the case you can download the official distribution or use the package manager provided by your Operating System. Some dependencies need to be installed before running the tests and to avoid polluting your global Python enviroment with dependencies that might be only used by the Arduino CLI, you can use a virtual environment . There are many ways to manage virtual environments, for example you can use a productivity tool called hatch . First you need to install it (you might need to sudo the following command): pip3 install --user hatch Then you can create a virtual environment to be used while working on Arduino CLI: hatch env arduino-cli At this point the virtual environment was created and you need to make it active every time you open a new terminal session with the following command: hatch shell arduino-cli From now on, every package installed by Python will be confined to the arduino-cli virtual environment, so you can proceed installing the dependencies required with: pip install -r test/requirements.txt If the last step was successful, you should be able to run the tests with: task test-integration","title":"Integration tests"},{"location":"CONTRIBUTING/#working-on-docs","text":"Documentation consists of several Markdown files stored under the docs folder at the root of the repo. Some of those files are automatically generated in the CI pipeline that builds the documentation website so you won't find them in the git repository and you need to generate them locally. If you're working on docs and your changes are not trivial, you might want to preview the documentation website locally, before opening a Pull Request. To run the docs toolchain locally you need to have: Go version 1.12 or later Taskfile to help you run the most common tasks from the command line A working Python environment, version 3.5 or later Before running the toolchain, perform the following operations: go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc When working on docs, you can launch a command that will take care of generating the docs, build the static website and start a local server you can access with your browser to see a preview of your changes - to launch this command do: task docs:serve If you don't see any error, hit http://127.0.0.1:8000 with your browser.","title":"Working on docs"},{"location":"CONTRIBUTING/#pull-requests","text":"In order to ease code reviews and have your contributions merged faster, here is a list of items you can check before submitting a PR: Create small PRs that are narrowly focused on addressing a single concern. PR titles indirectly become part of the CHANGELOG so it's crucial to provide a good record of what change is being made in the title; why it was made will go in the PR description, along with a link to a GitHub issue if it exists. Write tests for the code you wrote. Open your PR against the master branch. Maintain clean commit history and use meaningful commit messages . PRs with messy commit history are difficult to review and require a lot of work to be merged. Your PR must pass all CI tests before we will merge it. If you're seeing an error and don't think it's your fault, it may not be! The reviewer will help you if there are test failures that seem not related to the change you are making.","title":"Pull Requests"},{"location":"CONTRIBUTING/#additional-settings","text":"If you need to push a commit that's only shipping documentation changes or example files, thus a complete no-op for the test suite, please start the commit message with the string [skip ci] to skip the build and give that slot to someone else who does need it. If your PR doesn't need to be included in the changelog, please start the PR title with the string [skip changelog]","title":"Additional settings"},{"location":"FAQ/","text":"Arduino Uno/Mega/Duemilanove is not detected \u00b6 When you run arduino-cli board list , your board doesn't show up. Possible causes: Your board is a cheaper clone, or It mounts a USB2Serial converter like FT232 or CH340: these chips always report the same USB VID/PID to the operating system, so the only thing we know is that the board mounts that specific USB2Serial chip, but we don\u2019t know which board that chip is on. What's the FQBN string? \u00b6 For a deeper understanding of how FQBN works, you should understand the Arduino platform specification .","title":"FAQ"},{"location":"FAQ/#arduino-unomegaduemilanove-is-not-detected","text":"When you run arduino-cli board list , your board doesn't show up. Possible causes: Your board is a cheaper clone, or It mounts a USB2Serial converter like FT232 or CH340: these chips always report the same USB VID/PID to the operating system, so the only thing we know is that the board mounts that specific USB2Serial chip, but we don\u2019t know which board that chip is on.","title":"Arduino Uno/Mega/Duemilanove is not detected"},{"location":"FAQ/#whats-the-fqbn-string","text":"For a deeper understanding of how FQBN works, you should understand the Arduino platform specification .","title":"What's the FQBN string?"},{"location":"getting-started/","text":"Despite the lack of feature parity at the moment, Arduino CLI provides many of the features you can find in the Arduino IDE. Let's see some examples. Before you start \u00b6 arduino-cli is a container of commands and each command has its own dedicated help text that can be shown with the help command like this: $ arduino-cli help core Arduino Core operations. Usage: arduino-cli core [command] Examples: ./arduino-cli core update-index Available Commands: download Downloads one or more cores and corresponding tool dependencies. install Installs one or more cores and corresponding tool dependencies. list Shows the list of installed platforms. search Search for a core in the package index. uninstall Uninstalls one or more cores and corresponding tool dependencies if no more used. update-index Updates the index of cores. upgrade Upgrades one or all installed platforms to the latest version. Flags: -h, --help help for core Global Flags: --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. -v, --verbose Print the logs on the standard output. Use \"arduino-cli core [command] --help\" for more information about a command. Create a configuration file \u00b6 Arduino CLI doesn't strictly require a configuration file to work because the command line interface provides any possible functionality. However, having one can spare you a lot of typing when issuing a command, so let's go ahead and create it with: $ arduino-cli config init Config file written: /home/luca/.arduino15/arduino-cli.yaml If you inspect the contents of arduino-cli.yaml , you'll find the available options with their respective default values. Create a new sketch \u00b6 To create a new sketch named MyFirstSketch in the current directory, run the following command: $ arduino-cli sketch new MyFirstSketch Sketch created in: /home/luca/MyFirstSketch A sketch is a folder containing assets like source files and libraries; the new command creates for you a .ino file called MyFirstSketch.ino containing Arduino boilerplate code: $ cat $HOME /MyFirstSketch/MyFirstSketch.ino void setup () { } void loop () { } At this point you can use your favourite file editor or IDE to open the file $HOME/MyFirstSketch/MyFirstSketch.ino and change the code like this: void setup () { pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 1000 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 1000 ); } Connect the board to your PC \u00b6 The first thing to do upon a fresh install is to update the local cache of available platforms and libraries by running: $ arduino-cli core update-index Updating index: package_index.json downloaded After connecting the board to your PC by using the USB cable, you should be able to check whether it's been recognized by running: $ arduino-cli board list Port Type Board Name FQBN Core /dev/ttyACM1 Serial Port ( USB ) Arduino/Genuino MKR1000 arduino:samd:mkr1000 arduino:samd In this example, the MKR1000 board was recognized and from the output of the command you see the platform core called arduino:samd is the one that needs to be installed to make it work. If you see an Unknown board listed, uploading should still work as long as you identify the platform core and use the correct FQBN string. When a board is not detected for whatever reason, you can list all the supported boards and their FQBN strings by running the following: $ arduino-cli board listall mkr Board Name FQBN Arduino MKR FOX 1200 arduino:samd:mkrfox1200 Arduino MKR GSM 1400 arduino:samd:mkrgsm1400 Arduino MKR WAN 1300 arduino:samd:mkrwan1300 Arduino MKR WiFi 1010 arduino:samd:mkrwifi1010 Arduino MKRZERO arduino:samd:mkrzero Arduino/Genuino MKR1000 arduino:samd:mkr1000 Install the core for your board \u00b6 To install the arduino:samd platform core, run the following: $ arduino-cli core install arduino:samd Downloading tools... arduino:arm-none-eabi-gcc@4.8.3-2014q1 downloaded arduino:bossac@1.7.0 downloaded arduino:openocd@0.9.0-arduino6-static downloaded arduino:CMSIS@4.5.0 downloaded arduino:CMSIS-Atmel@1.1.0 downloaded arduino:arduinoOTA@1.2.0 downloaded Downloading cores... arduino:samd@1.6.19 downloaded Installing tools... Installing platforms... Results: arduino:samd@1.6.19 - Installed arduino:arm-none-eabi-gcc@4.8.3-2014q1 - Installed arduino:bossac@1.7.0 - Installed arduino:openocd@0.9.0-arduino6-static - Installed arduino:CMSIS@4.5.0 - Installed arduino:CMSIS-Atmel@1.1.0 - Installed arduino:arduinoOTA@1.2.0 - Installed Now verify we have installed the core properly by running: $ arduino-cli core list ID Installed Latest Name arduino:samd 1 .6.19 1 .6.19 Arduino SAMD Boards ( 32 -bits ARM Cortex-M0+ ) Great! Now we are ready to compile and upload the sketch. Adding 3 rd party cores \u00b6 If your board requires 3 rd party core packages to work, you can list the URLs to additional package indexes in the Arduino CLI configuration file. For example, to add the ESP8266 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json From now on, commands supporting custom cores will automatically use the additional URL from the configuration file: $ arduino-cli core update-index Updating index: package_index.json downloaded Updating index: package_esp8266com_index.json downloaded Updating index: package_index.json downloaded $ arduino-cli core search esp8266 ID Version Name esp8266:esp8266 2 .5.2 esp8266 Alternatively, you can pass a link to the additional package index file with the --additional-urls option, that has to be specified every time and for every command that operates on a 3 rd party platform core, for example: $ arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266 Compile and upload the sketch \u00b6 To compile the sketch you run the compile command, passing the proper FQBN string: $ arduino-cli compile --fqbn arduino:samd:mkr1000 MyFirstSketch Sketch uses 9600 bytes ( 3 % ) of program storage space. Maximum is 262144 bytes. To upload the sketch to your board, run the following command, this time also providing the serial port where the board is connected: $ arduino-cli upload -p /dev/ttyACM0 --fqbn arduino:samd:mkr1000 MyFirstSketch No new serial port detected. Atmel SMART device 0x10010005 found Device : ATSAMD21G18A Chip ID : 10010005 Version : v2.0 [ Arduino:XYZ ] Dec 20 2016 15 :36:43 Address : 8192 Pages : 3968 Page Size : 64 bytes Total Size : 248KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Arduino : FAST_CHIP_ERASE Arduino : FAST_MULTI_PAGE_WRITE Arduino : CAN_CHECKSUM_MEMORY_BUFFER Erase flash done in 0 .784 seconds Write 9856 bytes to flash ( 154 pages ) [==============================] 100 % ( 154 /154 pages ) done in 0 .069 seconds Verify 9856 bytes of flash with checksum. Verify successful done in 0 .009 seconds CPU reset. Add libraries \u00b6 If you need to add more functionalities to your sketch, chances are some of the libraries available in the Arduino ecosystem already provide what you need. For example, if you need a debouncing strategy to better handle button inputs, you can try searching for the debouncer keyword: $ arduino-cli lib search debouncer Name: \"Debouncer\" Author: hideakitai Maintainer: hideakitai Sentence: Debounce library for Arduino Paragraph: Debounce library for Arduino Website: https://github.com/hideakitai Category: Timing Architecture: * Types: Contributed Versions: [ 0 .1.0 ] Name: \"FTDebouncer\" Author: Ubi de Feo Maintainer: Ubi de Feo, Sebastian Hunkeler Sentence: An efficient, low footprint, fast pin debouncing library for Arduino Paragraph: This pin state supervisor manages debouncing of buttons and handles transitions between LOW and HIGH state, calling a function and notifying your code of which pin has been activated or deactivated. Website: https://github.com/ubidefeo/FTDebouncer Category: Uncategorized Architecture: * Types: Contributed Versions: [ 1 .3.0 ] Name: \"SoftTimer\" Author: Balazs Kelemen <prampec+arduino@gmail.com> Maintainer: Balazs Kelemen <prampec+arduino@gmail.com> Sentence: SoftTimer is a lightweight pseudo multitasking solution for Arduino. Paragraph: SoftTimer enables higher level Arduino programing, yet easy to use, and lightweight. You are often faced with the problem that you need to do multiple tasks at the same time. In SoftTimer, the programmer creates Tasks that runs periodically. This library comes with a collection of handy tools like blinker, pwm, debouncer. Website: https://github.com/prampec/arduino-softtimer Category: Timing Architecture: * Types: Contributed Versions: [ 3 .0.0, 3 .1.0, 3 .1.1, 3 .1.2, 3 .1.3, 3 .1.5, 3 .2.0 ] Our favourite is FTDebouncer , let's install it by running: $ arduino-cli lib install FTDebouncer FTDebouncer depends on FTDebouncer@1.3.0 Downloading FTDebouncer@1.3.0... FTDebouncer@1.3.0 downloaded Installing FTDebouncer@1.3.0... Installed FTDebouncer@1.3.0 Using the daemon mode and the gRPC interface \u00b6 Arduino CLI can be launched as a gRPC server via the daemon command. The client_example folder contains a sample client code that shows how to interact with the gRPC server. Available services and messages are detailed in the gRPC reference pages. To provide observability for the gRPC server activities besides logs, the daemon mode activates and exposes by default a Prometheus endpoint ( http://localhost:9090/metrics ) that can be fetched for telemetry data like: # TYPE daemon_compile counter daemon_compile{buildProperties=\"\",exportFile=\"\",fqbn=\"arduino:samd:mkr1000\",installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",jobs=\"0\",libraries=\"\",preprocess=\"false\",quiet=\"false\",showProperties=\"false\",sketchPath=\"5ff767c6fa5a91230f5cb4e267c889aa61489ab2c4f70f35f921f934c1462cb6\",success=\"true\",verbose=\"true\",vidPid=\"\",warnings=\"\"} 1 1580385724726 # TYPE daemon_board_list counter daemon_board_list{installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",success=\"true\"} 1 1580385724833 The telemetry settings are exposed via the telemetry section in the CLI configuration: telemetry : enabled : true addr : :9090","title":"Getting started"},{"location":"getting-started/#before-you-start","text":"arduino-cli is a container of commands and each command has its own dedicated help text that can be shown with the help command like this: $ arduino-cli help core Arduino Core operations. Usage: arduino-cli core [command] Examples: ./arduino-cli core update-index Available Commands: download Downloads one or more cores and corresponding tool dependencies. install Installs one or more cores and corresponding tool dependencies. list Shows the list of installed platforms. search Search for a core in the package index. uninstall Uninstalls one or more cores and corresponding tool dependencies if no more used. update-index Updates the index of cores. upgrade Upgrades one or all installed platforms to the latest version. Flags: -h, --help help for core Global Flags: --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. -v, --verbose Print the logs on the standard output. Use \"arduino-cli core [command] --help\" for more information about a command.","title":"Before you start"},{"location":"getting-started/#create-a-configuration-file","text":"Arduino CLI doesn't strictly require a configuration file to work because the command line interface provides any possible functionality. However, having one can spare you a lot of typing when issuing a command, so let's go ahead and create it with: $ arduino-cli config init Config file written: /home/luca/.arduino15/arduino-cli.yaml If you inspect the contents of arduino-cli.yaml , you'll find the available options with their respective default values.","title":"Create a configuration file"},{"location":"getting-started/#create-a-new-sketch","text":"To create a new sketch named MyFirstSketch in the current directory, run the following command: $ arduino-cli sketch new MyFirstSketch Sketch created in: /home/luca/MyFirstSketch A sketch is a folder containing assets like source files and libraries; the new command creates for you a .ino file called MyFirstSketch.ino containing Arduino boilerplate code: $ cat $HOME /MyFirstSketch/MyFirstSketch.ino void setup () { } void loop () { } At this point you can use your favourite file editor or IDE to open the file $HOME/MyFirstSketch/MyFirstSketch.ino and change the code like this: void setup () { pinMode ( LED_BUILTIN , OUTPUT ); } void loop () { digitalWrite ( LED_BUILTIN , HIGH ); delay ( 1000 ); digitalWrite ( LED_BUILTIN , LOW ); delay ( 1000 ); }","title":"Create a new sketch"},{"location":"getting-started/#connect-the-board-to-your-pc","text":"The first thing to do upon a fresh install is to update the local cache of available platforms and libraries by running: $ arduino-cli core update-index Updating index: package_index.json downloaded After connecting the board to your PC by using the USB cable, you should be able to check whether it's been recognized by running: $ arduino-cli board list Port Type Board Name FQBN Core /dev/ttyACM1 Serial Port ( USB ) Arduino/Genuino MKR1000 arduino:samd:mkr1000 arduino:samd In this example, the MKR1000 board was recognized and from the output of the command you see the platform core called arduino:samd is the one that needs to be installed to make it work. If you see an Unknown board listed, uploading should still work as long as you identify the platform core and use the correct FQBN string. When a board is not detected for whatever reason, you can list all the supported boards and their FQBN strings by running the following: $ arduino-cli board listall mkr Board Name FQBN Arduino MKR FOX 1200 arduino:samd:mkrfox1200 Arduino MKR GSM 1400 arduino:samd:mkrgsm1400 Arduino MKR WAN 1300 arduino:samd:mkrwan1300 Arduino MKR WiFi 1010 arduino:samd:mkrwifi1010 Arduino MKRZERO arduino:samd:mkrzero Arduino/Genuino MKR1000 arduino:samd:mkr1000","title":"Connect the board to your PC"},{"location":"getting-started/#install-the-core-for-your-board","text":"To install the arduino:samd platform core, run the following: $ arduino-cli core install arduino:samd Downloading tools... arduino:arm-none-eabi-gcc@4.8.3-2014q1 downloaded arduino:bossac@1.7.0 downloaded arduino:openocd@0.9.0-arduino6-static downloaded arduino:CMSIS@4.5.0 downloaded arduino:CMSIS-Atmel@1.1.0 downloaded arduino:arduinoOTA@1.2.0 downloaded Downloading cores... arduino:samd@1.6.19 downloaded Installing tools... Installing platforms... Results: arduino:samd@1.6.19 - Installed arduino:arm-none-eabi-gcc@4.8.3-2014q1 - Installed arduino:bossac@1.7.0 - Installed arduino:openocd@0.9.0-arduino6-static - Installed arduino:CMSIS@4.5.0 - Installed arduino:CMSIS-Atmel@1.1.0 - Installed arduino:arduinoOTA@1.2.0 - Installed Now verify we have installed the core properly by running: $ arduino-cli core list ID Installed Latest Name arduino:samd 1 .6.19 1 .6.19 Arduino SAMD Boards ( 32 -bits ARM Cortex-M0+ ) Great! Now we are ready to compile and upload the sketch.","title":"Install the core for your board"},{"location":"getting-started/#adding-3rd-party-cores","text":"If your board requires 3 rd party core packages to work, you can list the URLs to additional package indexes in the Arduino CLI configuration file. For example, to add the ESP8266 core, edit the configuration file and change the board_manager settings as follows: board_manager : additional_urls : - https://arduino.esp8266.com/stable/package_esp8266com_index.json From now on, commands supporting custom cores will automatically use the additional URL from the configuration file: $ arduino-cli core update-index Updating index: package_index.json downloaded Updating index: package_esp8266com_index.json downloaded Updating index: package_index.json downloaded $ arduino-cli core search esp8266 ID Version Name esp8266:esp8266 2 .5.2 esp8266 Alternatively, you can pass a link to the additional package index file with the --additional-urls option, that has to be specified every time and for every command that operates on a 3 rd party platform core, for example: $ arduino-cli core update-index --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json Updating index: package_esp8266com_index.json downloaded $ arduino-cli core search esp8266 --additional-urls https://arduino.esp8266.com/stable/package_esp8266com_index.json ID Version Name esp8266:esp8266 2 .5.2 esp8266","title":"Adding 3rd party cores"},{"location":"getting-started/#compile-and-upload-the-sketch","text":"To compile the sketch you run the compile command, passing the proper FQBN string: $ arduino-cli compile --fqbn arduino:samd:mkr1000 MyFirstSketch Sketch uses 9600 bytes ( 3 % ) of program storage space. Maximum is 262144 bytes. To upload the sketch to your board, run the following command, this time also providing the serial port where the board is connected: $ arduino-cli upload -p /dev/ttyACM0 --fqbn arduino:samd:mkr1000 MyFirstSketch No new serial port detected. Atmel SMART device 0x10010005 found Device : ATSAMD21G18A Chip ID : 10010005 Version : v2.0 [ Arduino:XYZ ] Dec 20 2016 15 :36:43 Address : 8192 Pages : 3968 Page Size : 64 bytes Total Size : 248KB Planes : 1 Lock Regions : 16 Locked : none Security : false Boot Flash : true BOD : true BOR : true Arduino : FAST_CHIP_ERASE Arduino : FAST_MULTI_PAGE_WRITE Arduino : CAN_CHECKSUM_MEMORY_BUFFER Erase flash done in 0 .784 seconds Write 9856 bytes to flash ( 154 pages ) [==============================] 100 % ( 154 /154 pages ) done in 0 .069 seconds Verify 9856 bytes of flash with checksum. Verify successful done in 0 .009 seconds CPU reset.","title":"Compile and upload the sketch"},{"location":"getting-started/#add-libraries","text":"If you need to add more functionalities to your sketch, chances are some of the libraries available in the Arduino ecosystem already provide what you need. For example, if you need a debouncing strategy to better handle button inputs, you can try searching for the debouncer keyword: $ arduino-cli lib search debouncer Name: \"Debouncer\" Author: hideakitai Maintainer: hideakitai Sentence: Debounce library for Arduino Paragraph: Debounce library for Arduino Website: https://github.com/hideakitai Category: Timing Architecture: * Types: Contributed Versions: [ 0 .1.0 ] Name: \"FTDebouncer\" Author: Ubi de Feo Maintainer: Ubi de Feo, Sebastian Hunkeler Sentence: An efficient, low footprint, fast pin debouncing library for Arduino Paragraph: This pin state supervisor manages debouncing of buttons and handles transitions between LOW and HIGH state, calling a function and notifying your code of which pin has been activated or deactivated. Website: https://github.com/ubidefeo/FTDebouncer Category: Uncategorized Architecture: * Types: Contributed Versions: [ 1 .3.0 ] Name: \"SoftTimer\" Author: Balazs Kelemen <prampec+arduino@gmail.com> Maintainer: Balazs Kelemen <prampec+arduino@gmail.com> Sentence: SoftTimer is a lightweight pseudo multitasking solution for Arduino. Paragraph: SoftTimer enables higher level Arduino programing, yet easy to use, and lightweight. You are often faced with the problem that you need to do multiple tasks at the same time. In SoftTimer, the programmer creates Tasks that runs periodically. This library comes with a collection of handy tools like blinker, pwm, debouncer. Website: https://github.com/prampec/arduino-softtimer Category: Timing Architecture: * Types: Contributed Versions: [ 3 .0.0, 3 .1.0, 3 .1.1, 3 .1.2, 3 .1.3, 3 .1.5, 3 .2.0 ] Our favourite is FTDebouncer , let's install it by running: $ arduino-cli lib install FTDebouncer FTDebouncer depends on FTDebouncer@1.3.0 Downloading FTDebouncer@1.3.0... FTDebouncer@1.3.0 downloaded Installing FTDebouncer@1.3.0... Installed FTDebouncer@1.3.0","title":"Add libraries"},{"location":"getting-started/#using-the-daemon-mode-and-the-grpc-interface","text":"Arduino CLI can be launched as a gRPC server via the daemon command. The client_example folder contains a sample client code that shows how to interact with the gRPC server. Available services and messages are detailed in the gRPC reference pages. To provide observability for the gRPC server activities besides logs, the daemon mode activates and exposes by default a Prometheus endpoint ( http://localhost:9090/metrics ) that can be fetched for telemetry data like: # TYPE daemon_compile counter daemon_compile{buildProperties=\"\",exportFile=\"\",fqbn=\"arduino:samd:mkr1000\",installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",jobs=\"0\",libraries=\"\",preprocess=\"false\",quiet=\"false\",showProperties=\"false\",sketchPath=\"5ff767c6fa5a91230f5cb4e267c889aa61489ab2c4f70f35f921f934c1462cb6\",success=\"true\",verbose=\"true\",vidPid=\"\",warnings=\"\"} 1 1580385724726 # TYPE daemon_board_list counter daemon_board_list{installationID=\"ed6f1f22-1fbe-4b1f-84be-84d035b6369c\",success=\"true\"} 1 1580385724833 The telemetry settings are exposed via the telemetry section in the CLI configuration: telemetry : enabled : true addr : :9090","title":"Using the daemon mode and the gRPC interface"},{"location":"installation/","text":"Install via Homebrew (macOS/Linux) \u00b6 The Arduino CLI is available as a Homebrew formula since version 0.5.0 : brew update brew install arduino-cli Use the install script \u00b6 The easiest way to get the latest version of the Arduino CLI on any supported platform is using the install.sh script: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh The script will install arduino-cli at $PWD/bin but if you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR = ~/local/bin sh Download the latest packages \u00b6 You can download the latest version of the pre-built binaries for the supported platforms from the release page or following the links in the following table. Once downloaded, extract the binary arduino-cli into a directory that is in your PATH . Platform Linux Linux 32 bit Linux 64 bit Linux ARM Linux ARM 32 bit Linux ARM 64 bit Windows Windows 32 bit Windows 64 bit Mac OSX Mac OSX Deprecation notice : links in the form http://downloads.arduino.cc/arduino-cli/arduino-cli-latest-<platform>.tar.bz2 won\u2019t be further updated. That URL will provide the version 0.3.7-alpha.preview , regardless of further releases. Download a nightly build \u00b6 These builds are generated everyday at 01:00 GMT from the master branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux Nightly Linux 32 bit Nightly Linux 64 bit Linux ARM Nightly Linux ARM 32 bit Nightly Linux ARM 64 bit Windows Nightly Windows 32 bit Nightly Windows 64 bit Mac OSX Mac OSX These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019/Aug/06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-cli/nightly/nightly-<DATE>-checksums.txt Once downloaded, extract the executable arduino-cli into a directory which is in your PATH . Build from source \u00b6 If you\u2019re familiar with Golang or if you want to contribute to the project, you will probably build the arduino-cli locally with your Go toolchain. Please refer to the [contributing] document for setup instructions. If you don\u2019t have a working Golang environment or if you want to build arduino-cli targeting different platforms, you can use Docker to get a binary directly from sources. From the project folder run: docker run -v $PWD :/arduino-cli -w /arduino-cli -e PACKAGE_NAME_PREFIX = 'snapshot' arduino/arduino-cli:builder-1 goreleaser --rm-dist --snapshot --skip-publish Once the build is over, you will find a ./dist/ folder containing the packages built out of the current source tree.","title":"Installation"},{"location":"installation/#install-via-homebrew-macoslinux","text":"The Arduino CLI is available as a Homebrew formula since version 0.5.0 : brew update brew install arduino-cli","title":"Install via Homebrew (macOS/Linux)"},{"location":"installation/#use-the-install-script","text":"The easiest way to get the latest version of the Arduino CLI on any supported platform is using the install.sh script: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh The script will install arduino-cli at $PWD/bin but if you want to target a different directory, for example ~/local/bin , set the BINDIR environment variable like this: curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR = ~/local/bin sh","title":"Use the install script"},{"location":"installation/#download-the-latest-packages","text":"You can download the latest version of the pre-built binaries for the supported platforms from the release page or following the links in the following table. Once downloaded, extract the binary arduino-cli into a directory that is in your PATH . Platform Linux Linux 32 bit Linux 64 bit Linux ARM Linux ARM 32 bit Linux ARM 64 bit Windows Windows 32 bit Windows 64 bit Mac OSX Mac OSX Deprecation notice : links in the form http://downloads.arduino.cc/arduino-cli/arduino-cli-latest-<platform>.tar.bz2 won\u2019t be further updated. That URL will provide the version 0.3.7-alpha.preview , regardless of further releases.","title":"Download the latest packages"},{"location":"installation/#download-a-nightly-build","text":"These builds are generated everyday at 01:00 GMT from the master branch and should be considered unstable. In order to get the latest nightly build available for the supported platform, use the following links: Platform Linux Nightly Linux 32 bit Nightly Linux 64 bit Linux ARM Nightly Linux ARM 32 bit Nightly Linux ARM 64 bit Windows Nightly Windows 32 bit Nightly Windows 64 bit Mac OSX Mac OSX These links return a 302: Found response, redirecting to latest generated builds by replacing latest with the latest available build date, using the format YYYYMMDD (i.e for 2019/Aug/06 latest is replaced with 20190806 ) Checksums for the nightly builds are available at https://downloads.arduino.cc/arduino-cli/nightly/nightly-<DATE>-checksums.txt Once downloaded, extract the executable arduino-cli into a directory which is in your PATH .","title":"Download a nightly build"},{"location":"installation/#build-from-source","text":"If you\u2019re familiar with Golang or if you want to contribute to the project, you will probably build the arduino-cli locally with your Go toolchain. Please refer to the [contributing] document for setup instructions. If you don\u2019t have a working Golang environment or if you want to build arduino-cli targeting different platforms, you can use Docker to get a binary directly from sources. From the project folder run: docker run -v $PWD :/arduino-cli -w /arduino-cli -e PACKAGE_NAME_PREFIX = 'snapshot' arduino/arduino-cli:builder-1 goreleaser --rm-dist --snapshot --skip-publish Once the build is over, you will find a ./dist/ folder containing the packages built out of the current source tree.","title":"Build from source"},{"location":"library-specification/","text":"This is the specification for the 3 rd party library format to be used with Arduino IDE 1.5.x onwards. rev.1 has been implemented starting with IDE version 1.5.3 (now superseded by rev.2) rev.2 will be implemented starting from version 1.5.6 rev.2.1 will be implemented starting from version 1.6.10 rev.2.2 will be implemented starting from version 1.8.10 This new library format is intended to be used in tandem with the Arduino IDE's Library Manager , available since version 1.6.2. The Library Manager allows users to automatically download and install libraries needed in their projects, with an easy to use graphic interface. It doesn't yet take care of dependencies between libraries. More information about how Library Manager works is available here . Arduino IDE 1.5.x+ supports multiple microcontroller architectures (e.g. AVR, SAM, etc), meaning that libraries may need to work on multiple architectures. The new 1.5 library format doesn\u2019t contain special support for cross-architecture libraries, but it does provide a preprocessor based mechanism for libraries to target sections of code to specific architectures. See also \u00b6 The Arduino library style guide is here : http://arduino.cc/en/Reference/APIStyleGuide The style guide for examples is here : http://arduino.cc/en/Reference/StyleGuide 1.5 library format (rev. 2.2) \u00b6 Library metadata \u00b6 The most significant addition to the format is the ability to add information about the library itself through a properties file called library.properties . This file allows the Library Manager to search and install a library and its dependencies in an easy and automated way. It must be located in the root of the library folder. library.properties file format \u00b6 The library.properties file is a key=value properties list. Every field in this file is UTF-8 encoded. Unless noted otherwise below, all fields are required . The available fields are: name - the name of the library. Library names must contain only basic letters ( A - Z or a - z ) and numbers ( 0 - 9 ), spaces ( ), underscores ( _ ), dots ( . ) and dashes ( - ). It cannot start or end with a space, and also it cannot start with a number. Note that libraries with a name value starting with Arduino will no longer be allowed addition to the Library Manager index as these names are now reserved for official Arduino libraries. version - version of the library. Version should be semver compliant. 1.2.0 is correct; 1.2 is accepted; r5, 003, 1.1c are invalid author - name/nickname of the authors and their email addresses (not mandatory) separated by comma \",\" maintainer - name and email of the maintainer sentence - a sentence explaining the purpose of the library paragraph - a longer description of the library. The value of sentence always will be prepended, so you should start by writing the second sentence here category - (defaults to Uncategorized ) if present, one of these: Display Communication Signal Input/Output Sensors Device Control Timing Data Storage Data Processing Other url - the URL of the library project, for a person to visit. For example, the library's GitHub page. This is used for the \"More info\" links in Library Manager architectures - (defaults to * ) a comma separated list of architectures supported by the library. If the library doesn\u2019t contain architecture specific code use * to match all architectures. This field is used as one factor in determining priority when multiple libraries match an #include directive and to provide a warning message when the library is compiled for a board of an architecture that doesn't match any on the list. depends - (available from Arduino IDE 1.8.10) (optional) a comma-separated list of dependencies (libraries that are needed to build the current library). Library Manager will offer to install the dependencies during installation of the library. Since spaces are allowed in the name of a library, but not commas, you can refer to libraries containing spaces in the name without ambiguity for example: depends=Very long library name, Another library with long-name dot_a_linkage - (available from Arduino IDE 1.6.0 / arduino-builder 1.0.0-beta13) (optional) when set to true , the library will be compiled using a .a (archive) file. First, all source files are compiled into .o files as normal. Then instead of including all .o files in the linker command directly, all .o files are saved into a .a file, which is then included in the linker command. 1.5 format library folder structure is required. includes - (available from Arduino IDE 1.6.10) (optional) a comma separated list of files to be added to the sketch as #include <...> lines. This property is used with the \"Include library\" command in the IDE. If the includes property is missing, all the header files (.h) on the root source folder are included. precompiled - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) set to true to allow the use of .a (archive) and .so (shared object) files. The .a/.so file must be located at src/{build.mcu} where {build.mcu} is the architecture name of the target the file was compiled for. Ex: cortex-m3 for the Arduino DUE. The static library should be linked as an ldflag. ldflags - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) the linker flags to be added. Ex: ldflags=-lm Example: name=WebServer version=1.0.0 author=Cristian Maglie <c.maglie@example.com>, Pippo Pluto <pippo@example.com> maintainer=Cristian Maglie <c.maglie@example.com> sentence=A library that makes coding a Webserver a breeze. paragraph=Supports HTTP1.1 and you can do GET and POST. category=Communication url=http://example.com/ architectures=avr includes=WebServer.h depends=ArduinoHttpClient Layout of folders and files \u00b6 Each folder has a specific purpose (sources, examples, documentation, etc). Folders not covered in this specification may be added as needed to future revisions. Library Root folder \u00b6 The library root folder name must start with a basic letter ( A - Z or a - z ) or number ( 0 - 9 ), followed by basic letters, numbers, spaces ( ), underscores ( _ ), dots ( . ) and dashes ( - ). The maximum length is 63 characters. Source code \u00b6 For 1.5.x+-only libraries, the source code resides in the src folder. For example: Servo/src/Servo.h Servo/src/Servo.cpp The source code found in src folder and all its subfolders is compiled and linked in the user\u2019s sketch. Only the src folder is added to the include search path (both when compiling the sketch and the library). When the user imports a library into their sketch (from the \"Sketch > Include Library\" menu), an #include statement will be added for all header (.h) files in the src/ directory (but not its subfolders). As a result, these header files form something of a de facto interface to your library; in general, the only header files in the root src/ folder should be those that you want to expose to the user's sketch and plan to maintain compatibility with in future versions of the library. Place internal header files in a subfolder of the src/ folder. For backward compatibility with Arduino 1.0.x, the library author may opt to place source code into the root folder, instead of the folder called src . In this case the 1.0 library format is applied and the source code is searched from the library root folder and the utility folder, for example: Servo/Servo.h Servo/Servo.cpp Servo/utility/ServoTimers.h Servo/utility/ServoTimers.cpp This will allow existing 1.0.x libraries to compile under 1.5.x+ as well and vice-versa. If a library only needs to run on 1.5.x+, we recommend placing all source code in the src/ folder. If a library requires recursive compilation of nested source folders, its code must be in the src/ folder (since 1.0.x doesn\u2019t support recursive compilation, backwards compatibility wouldn\u2019t be possible anyway). Library Examples \u00b6 Library examples must be placed in the examples folder. Note that the examples folder must be written exactly like that (with lower case letters). Servo/examples/... Sketches contained inside the examples folder will be shown in the Examples menu of the IDE. Extra documentation \u00b6 An extras folder can be used by the developer to put documentation or other items to be bundled with the library. Remember that files placed inside this folder will increase the size of the library, so putting a 20MB PDF in a library that weights a few kilobytes may not be such a good idea. The content of the extras folder is totally ignored by the IDE; you are free to put anything inside such as supporting documentation, etc. Keywords \u00b6 A list of keywords for the library may be specified in a file named keywords.txt located in the root of the library folder. When a keyword of any installed library is used in a sketch the Arduino IDE colors it. Servo/keywords.txt An example keywords.txt file: # Syntax Coloring Map For ExampleLibrary # Datatypes (KEYWORD1) Test KEYWORD1 # Methods and Functions (KEYWORD2) doSomething KEYWORD2 # Instances (KEYWORD2) # Constants (LITERAL1) This file would cause the Arduino IDE to highlight Test as a DataType, and doSomething as a method / function. keywords.txt format \u00b6 keywords.txt is formatted in four fields which are separated by a single true tab (not spaces): KEYWORD KEYWORD_TOKENTYPE REFERENCE_LINK RSYNTAXTEXTAREA_TOKENTYPE It is permitted to leave a field empty. KEYWORD_TOKENTYPE \u00b6 KEYWORD_TOKENTYPE Use for Theme property KEYWORD1 datatypes editor.data_type.style KEYWORD2 functions editor.function.style KEYWORD3 structures editor.function.style LITERAL1 constants editor.reserved_word_2.style LITERAL2 ? editor.function.style REFERENCE_LINK \u00b6 This field specifies the Arduino Language Reference page to open via Right Click > Find in Reference or Help > Find in Reference when the cursor is on that keyword. Generally it does not make sense to define the REFERENCE_LINK field for 3 rd party library keywords since they are not likely to be in the Arduino Language Reference. RSYNTAXTEXTAREA_TOKENTYPE \u00b6 In Arduino IDE 1.6.5 and newer this field overrides KEYWORD_TOKENTYPE . In previous IDE versions the RSYNTAXTEXTAREA_TOKENTYPE field is ignored and KEYWORD_TOKENTYPE is used instead. RSYNTAXTEXTAREA_TOKENTYPE Theme property KEYWORD_TOKENTYPE equivalent RESERVED_WORD editor.reserved_word.style KEYWORD3 RESERVED_WORD_2 editor.reserved_word_2.style LITERAL1 DATA_TYPE editor.data_type.style KEYWORD1 PREPROCESSOR editor.preprocessor.style KEYWORD3 LITERAL_BOOLEAN editor.literal_boolean.style LITERAL1 Development flag file \u00b6 Normally the Arduino IDE treats the contents of the library folder as read-only. This is to prevent users from accidentally modifying example sketches. During the library development process you may want to edit example sketches in place using the Arduino IDE. With Arduino IDE 1.6.6 and newer, the read-only behavior can be disabled by adding a file named .development to the root of the library folder. A library.properties file must also be present. The Library Manager indexer will not pick up releases that contain a .development file so be sure not to push this file to your remote repository. A complete example \u00b6 A hypothetical library named \"Servo\" that adheres to the specification follows: Servo/ Servo/library.properties Servo/keywords.txt Servo/src/ Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/ServoTimers.h Servo/examples/ Servo/examples/Sweep/Sweep.ino Servo/examples/Pot/Pot.ino Servo/extras/ Servo/extras/Servo_Connectors.pdf Working with multiple architectures \u00b6 In 1.5.x+, libraries placed in the user\u2019s sketchbook folder (in the libraries/ subfolder) will be made available for all boards, which may include multiple different processor architectures. To provide architecture-specific code or optimizations, library authors can use the ARDUINO_ARCH_XXX preprocessor macro ( #define ), where XXX is the name of the architecture (as determined by the name of the folder containing it), e.g. ARDUINO_ARCH_AVR will be defined when compiling for AVR-based boards. For example, #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else // generic, non-platform specific code #endif Alternatively, if a library only works on certain architectures, you can provide an explicit error message (instead of allowing the compilation to fail in a difficult to understand way): #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else #error \u201cThis library only supports boards with an AVR or SAM processor.\u201d #endif Old library format (pre-1.5) \u00b6 In order to support old libraries (from Arduino 1.0.x), Arduino 1.5.x+ will also compile libraries missing a library.properties metadata file. As a result, these libraries should behave as they did in Arduino 1.0.x, although they will be available for all boards, including non-AVR ones (which wouldn\u2019t have been present in 1.0.x).","title":"Library specification"},{"location":"library-specification/#see-also","text":"The Arduino library style guide is here : http://arduino.cc/en/Reference/APIStyleGuide The style guide for examples is here : http://arduino.cc/en/Reference/StyleGuide","title":"See also"},{"location":"library-specification/#15-library-format-rev-22","text":"","title":"1.5 library format (rev. 2.2)"},{"location":"library-specification/#library-metadata","text":"The most significant addition to the format is the ability to add information about the library itself through a properties file called library.properties . This file allows the Library Manager to search and install a library and its dependencies in an easy and automated way. It must be located in the root of the library folder.","title":"Library metadata"},{"location":"library-specification/#libraryproperties-file-format","text":"The library.properties file is a key=value properties list. Every field in this file is UTF-8 encoded. Unless noted otherwise below, all fields are required . The available fields are: name - the name of the library. Library names must contain only basic letters ( A - Z or a - z ) and numbers ( 0 - 9 ), spaces ( ), underscores ( _ ), dots ( . ) and dashes ( - ). It cannot start or end with a space, and also it cannot start with a number. Note that libraries with a name value starting with Arduino will no longer be allowed addition to the Library Manager index as these names are now reserved for official Arduino libraries. version - version of the library. Version should be semver compliant. 1.2.0 is correct; 1.2 is accepted; r5, 003, 1.1c are invalid author - name/nickname of the authors and their email addresses (not mandatory) separated by comma \",\" maintainer - name and email of the maintainer sentence - a sentence explaining the purpose of the library paragraph - a longer description of the library. The value of sentence always will be prepended, so you should start by writing the second sentence here category - (defaults to Uncategorized ) if present, one of these: Display Communication Signal Input/Output Sensors Device Control Timing Data Storage Data Processing Other url - the URL of the library project, for a person to visit. For example, the library's GitHub page. This is used for the \"More info\" links in Library Manager architectures - (defaults to * ) a comma separated list of architectures supported by the library. If the library doesn\u2019t contain architecture specific code use * to match all architectures. This field is used as one factor in determining priority when multiple libraries match an #include directive and to provide a warning message when the library is compiled for a board of an architecture that doesn't match any on the list. depends - (available from Arduino IDE 1.8.10) (optional) a comma-separated list of dependencies (libraries that are needed to build the current library). Library Manager will offer to install the dependencies during installation of the library. Since spaces are allowed in the name of a library, but not commas, you can refer to libraries containing spaces in the name without ambiguity for example: depends=Very long library name, Another library with long-name dot_a_linkage - (available from Arduino IDE 1.6.0 / arduino-builder 1.0.0-beta13) (optional) when set to true , the library will be compiled using a .a (archive) file. First, all source files are compiled into .o files as normal. Then instead of including all .o files in the linker command directly, all .o files are saved into a .a file, which is then included in the linker command. 1.5 format library folder structure is required. includes - (available from Arduino IDE 1.6.10) (optional) a comma separated list of files to be added to the sketch as #include <...> lines. This property is used with the \"Include library\" command in the IDE. If the includes property is missing, all the header files (.h) on the root source folder are included. precompiled - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) set to true to allow the use of .a (archive) and .so (shared object) files. The .a/.so file must be located at src/{build.mcu} where {build.mcu} is the architecture name of the target the file was compiled for. Ex: cortex-m3 for the Arduino DUE. The static library should be linked as an ldflag. ldflags - (available from Arduino IDE 1.8.6/arduino-builder 1.4.0) (optional) the linker flags to be added. Ex: ldflags=-lm Example: name=WebServer version=1.0.0 author=Cristian Maglie <c.maglie@example.com>, Pippo Pluto <pippo@example.com> maintainer=Cristian Maglie <c.maglie@example.com> sentence=A library that makes coding a Webserver a breeze. paragraph=Supports HTTP1.1 and you can do GET and POST. category=Communication url=http://example.com/ architectures=avr includes=WebServer.h depends=ArduinoHttpClient","title":"library.properties file format"},{"location":"library-specification/#layout-of-folders-and-files","text":"Each folder has a specific purpose (sources, examples, documentation, etc). Folders not covered in this specification may be added as needed to future revisions.","title":"Layout of folders and files"},{"location":"library-specification/#library-root-folder","text":"The library root folder name must start with a basic letter ( A - Z or a - z ) or number ( 0 - 9 ), followed by basic letters, numbers, spaces ( ), underscores ( _ ), dots ( . ) and dashes ( - ). The maximum length is 63 characters.","title":"Library Root folder"},{"location":"library-specification/#source-code","text":"For 1.5.x+-only libraries, the source code resides in the src folder. For example: Servo/src/Servo.h Servo/src/Servo.cpp The source code found in src folder and all its subfolders is compiled and linked in the user\u2019s sketch. Only the src folder is added to the include search path (both when compiling the sketch and the library). When the user imports a library into their sketch (from the \"Sketch > Include Library\" menu), an #include statement will be added for all header (.h) files in the src/ directory (but not its subfolders). As a result, these header files form something of a de facto interface to your library; in general, the only header files in the root src/ folder should be those that you want to expose to the user's sketch and plan to maintain compatibility with in future versions of the library. Place internal header files in a subfolder of the src/ folder. For backward compatibility with Arduino 1.0.x, the library author may opt to place source code into the root folder, instead of the folder called src . In this case the 1.0 library format is applied and the source code is searched from the library root folder and the utility folder, for example: Servo/Servo.h Servo/Servo.cpp Servo/utility/ServoTimers.h Servo/utility/ServoTimers.cpp This will allow existing 1.0.x libraries to compile under 1.5.x+ as well and vice-versa. If a library only needs to run on 1.5.x+, we recommend placing all source code in the src/ folder. If a library requires recursive compilation of nested source folders, its code must be in the src/ folder (since 1.0.x doesn\u2019t support recursive compilation, backwards compatibility wouldn\u2019t be possible anyway).","title":"Source code"},{"location":"library-specification/#library-examples","text":"Library examples must be placed in the examples folder. Note that the examples folder must be written exactly like that (with lower case letters). Servo/examples/... Sketches contained inside the examples folder will be shown in the Examples menu of the IDE.","title":"Library Examples"},{"location":"library-specification/#extra-documentation","text":"An extras folder can be used by the developer to put documentation or other items to be bundled with the library. Remember that files placed inside this folder will increase the size of the library, so putting a 20MB PDF in a library that weights a few kilobytes may not be such a good idea. The content of the extras folder is totally ignored by the IDE; you are free to put anything inside such as supporting documentation, etc.","title":"Extra documentation"},{"location":"library-specification/#keywords","text":"A list of keywords for the library may be specified in a file named keywords.txt located in the root of the library folder. When a keyword of any installed library is used in a sketch the Arduino IDE colors it. Servo/keywords.txt An example keywords.txt file: # Syntax Coloring Map For ExampleLibrary # Datatypes (KEYWORD1) Test KEYWORD1 # Methods and Functions (KEYWORD2) doSomething KEYWORD2 # Instances (KEYWORD2) # Constants (LITERAL1) This file would cause the Arduino IDE to highlight Test as a DataType, and doSomething as a method / function.","title":"Keywords"},{"location":"library-specification/#keywordstxt-format","text":"keywords.txt is formatted in four fields which are separated by a single true tab (not spaces): KEYWORD KEYWORD_TOKENTYPE REFERENCE_LINK RSYNTAXTEXTAREA_TOKENTYPE It is permitted to leave a field empty.","title":"keywords.txt format"},{"location":"library-specification/#keyword_tokentype","text":"KEYWORD_TOKENTYPE Use for Theme property KEYWORD1 datatypes editor.data_type.style KEYWORD2 functions editor.function.style KEYWORD3 structures editor.function.style LITERAL1 constants editor.reserved_word_2.style LITERAL2 ? editor.function.style","title":"KEYWORD_TOKENTYPE"},{"location":"library-specification/#reference_link","text":"This field specifies the Arduino Language Reference page to open via Right Click > Find in Reference or Help > Find in Reference when the cursor is on that keyword. Generally it does not make sense to define the REFERENCE_LINK field for 3 rd party library keywords since they are not likely to be in the Arduino Language Reference.","title":"REFERENCE_LINK"},{"location":"library-specification/#rsyntaxtextarea_tokentype","text":"In Arduino IDE 1.6.5 and newer this field overrides KEYWORD_TOKENTYPE . In previous IDE versions the RSYNTAXTEXTAREA_TOKENTYPE field is ignored and KEYWORD_TOKENTYPE is used instead. RSYNTAXTEXTAREA_TOKENTYPE Theme property KEYWORD_TOKENTYPE equivalent RESERVED_WORD editor.reserved_word.style KEYWORD3 RESERVED_WORD_2 editor.reserved_word_2.style LITERAL1 DATA_TYPE editor.data_type.style KEYWORD1 PREPROCESSOR editor.preprocessor.style KEYWORD3 LITERAL_BOOLEAN editor.literal_boolean.style LITERAL1","title":"RSYNTAXTEXTAREA_TOKENTYPE"},{"location":"library-specification/#development-flag-file","text":"Normally the Arduino IDE treats the contents of the library folder as read-only. This is to prevent users from accidentally modifying example sketches. During the library development process you may want to edit example sketches in place using the Arduino IDE. With Arduino IDE 1.6.6 and newer, the read-only behavior can be disabled by adding a file named .development to the root of the library folder. A library.properties file must also be present. The Library Manager indexer will not pick up releases that contain a .development file so be sure not to push this file to your remote repository.","title":"Development flag file"},{"location":"library-specification/#a-complete-example","text":"A hypothetical library named \"Servo\" that adheres to the specification follows: Servo/ Servo/library.properties Servo/keywords.txt Servo/src/ Servo/src/Servo.h Servo/src/Servo.cpp Servo/src/ServoTimers.h Servo/examples/ Servo/examples/Sweep/Sweep.ino Servo/examples/Pot/Pot.ino Servo/extras/ Servo/extras/Servo_Connectors.pdf","title":"A complete example"},{"location":"library-specification/#working-with-multiple-architectures","text":"In 1.5.x+, libraries placed in the user\u2019s sketchbook folder (in the libraries/ subfolder) will be made available for all boards, which may include multiple different processor architectures. To provide architecture-specific code or optimizations, library authors can use the ARDUINO_ARCH_XXX preprocessor macro ( #define ), where XXX is the name of the architecture (as determined by the name of the folder containing it), e.g. ARDUINO_ARCH_AVR will be defined when compiling for AVR-based boards. For example, #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else // generic, non-platform specific code #endif Alternatively, if a library only works on certain architectures, you can provide an explicit error message (instead of allowing the compilation to fail in a difficult to understand way): #if defined(ARDUINO_ARCH_AVR) // AVR-specific code #elif defined(ARDUINO_ARCH_SAM) // SAM-specific code #else #error \u201cThis library only supports boards with an AVR or SAM processor.\u201d #endif","title":"Working with multiple architectures"},{"location":"library-specification/#old-library-format-pre-15","text":"In order to support old libraries (from Arduino 1.0.x), Arduino 1.5.x+ will also compile libraries missing a library.properties metadata file. As a result, these libraries should behave as they did in Arduino 1.0.x, although they will be available for all boards, including non-AVR ones (which wouldn\u2019t have been present in 1.0.x).","title":"Old library format (pre-1.5)"},{"location":"package_index_json-specification/","text":"Starting from version 1.6.4 the Boards Manager of the Arduino IDE can be used to automatically install support for 3 rd party hardware by simply entering an URL in the File > Preferences dialog. The URL must be provided by the 3 rd party hardware producer and should point to a JSON file that contains an index of the boards available to install and the location of the installation archives. Boards Manager also allows easy updates of installed Boards when new versions are released. Naming of the JSON index file \u00b6 The IDE may use many different index files coming from different vendors, so each vendor should name his own index file in a way that won't conflict with others. The file must be named as follows: package_YOURNAME_PACKAGENAME_index.json The prefix package_ and the postfix _index.json are mandatory (otherwise the index file is not recognised by the IDE) while the choice of YOURNAME_PACKAGENAME is left to the packager. We suggest using a domain name owned by the packager. For example: package_arduino.cc_index.json or package_example.com_avr_boards_index.json The index URL is periodically checked for updates so expect a constant flow of downloads (proportional to the number of active users). JSON Index file contents \u00b6 The root of the JSON index is an array of packages : { \"packages\" : [ PACKAGE_XXXX ] } 3 rd party vendors should use a single PACKAGE_XXXX that is a dictionary map with the vendor's metadata, a list of PLATFORMS and a list of TOOLS . For example: { \"name\" : \"arduino\" , \"maintainer\" : \"Arduino LLC\" , \"websiteURL\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"platforms\" : [ PLATFORM_AVR , PLATFORM_ARM , PLATFORM_XXXXX , PLATFORM_YYYYY , ], \"tools\" : [ TOOLS_COMPILER_AVR , TOOLS_UPLOADER_AVR , TOOLS_COMPILER_ARM , TOOLS_XXXXXXX , TOOLS_YYYYYYY , ], } The metadata fields are: name : the folder used for the installed cores. The vendor folder name of the installed package is determined by this field maintainer : the extended name of the vendor that is displayed on the Boards Manager GUI websiteURL : the URL to the vendor's website, appears on the Boards Manager as a \"More info\" link email : the email of the vendor/maintainer Now, before looking at PLATFORMS , let's explore first how TOOLS are made. Tools definitions \u00b6 Each tool describes a binary distribution of a command line tool. A tool can be: a compiler toolchain an uploader a file preprocessor a debugger a program that performs a firmware upgrade basically anything that can run on the user's host PC and do something useful. For example, Arduino uses two command line tools for the AVR boards: avr-gcc (the compiler) and avrdude (the uploader). Tools are mapped as JSON in this way: { \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" , \"systems\" : [ { \"host\" : \"i386-apple-darwin11\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-i386-apple-darwin11.tar.bz2\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-i386-apple-darwin11.tar.bz2\" , \"size\" : \"24437400\" , \"checksum\" : \"SHA-256:111b3ef00d737d069eb237a8933406cbb928e4698689e24663cffef07688a901\" }, { \"host\" : \"x86_64-linux-gnu\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-x86_64-pc-linux-gnu.tar.bz2\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-x86_64-pc-linux-gnu.tar.bz2\" , \"size\" : \"27093036\" , \"checksum\" : \"SHA-256:9054fcc174397a419ba56c4ce1bfcbcad275a6a080cc144905acc9b0351ee9cc\" }, { \"host\" : \"i686-linux-gnu\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-i686-pc-linux-gnu.tar.bz2\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-i686-pc-linux-gnu.tar.bz2\" , \"size\" : \"25882375\" , \"checksum\" : \"SHA-256:7648b7f549b37191da0b0be53bae791b652f82ac3cb4e7877f85075aaf32141f\" }, { \"host\" : \"i686-mingw32\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-i686-mingw32.zip\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-i686-mingw32.zip\" , \"size\" : \"46044779\" , \"checksum\" : \"SHA-256:d4303226a7b41d3c445d901b5aa5903458def3fc7b7ff4ffef37cabeb37d424d\" } ] } , The field name and version are respectively the name and version of the tool. Each tool is uniquely identified by the triple ( vendor , name , version ) and there can be many different versions of the same tool available at the same time, for example: ( arduino , avr-gcc , 4.8.1-arduino2 ) ( arduino , avr-gcc , 4.8.1-arduino3 ) ( arduino , avr-gcc , 4.8.1-arduino5 ) ( arduino , avrdude , 5.11 ) ( arduino , avrdude , 6.0 ) ( arduino , avrdude , 6.1 ) ..... Each tool version may come in different build flavours for different OS. Each flavour is listed under the systems array. In the example above avr-gcc comes with builds for: Linux 64-bit ( x86_64-linux-gnu ), Linux 32-bit ( i686-linux-gnu ), Windows ( i686-mingw32 ), Mac ( i386-apple-darwin11 ) The IDE will take care to install the right flavour based on the host value, or fail if a needed flavour is missing. Note that the IDE does not use this information to select the toolchain during verify. If you want the IDE to use this specific version you should use the notation {runtime.tools.TOOLNAME-VERSION.path} in the platform.txt. The other fields are: url : the download URL of the tool's archive archiveFileName : the name of the file saved to disk after the download (some web servers don't provide the filename through the HTTP request) size : the size of the archive in bytes checksum : the checksum of the archive, used to check if the file has been corrupted. The format is ALGORITHM:CHECKSUM , currently MD5 , SHA-1 , SHA-256 algorithm are supported, we recommend SHA-256 . On *nix or MacOSX you may be able to use the command shasum -a 256 filename to generate SHA-256 checksums. There are many free options for Windows including md5deep, there are also online utilities for generating checksums. How a tool's path is determined in platform.txt \u00b6 When the IDE needs a tool it downloads the corresponding archive file and unpacks the content into a private folder that can be referenced from platform.txt using one of the following properties: {runtime.tools.TOOLNAME-VERSION.path} {runtime.tools.TOOLNAME.path} For example to obtain the avr-gcc 4.8.1 folder we can use {runtime.tools.avr-gcc-4.8.1-arduino5.path} or {runtime.tools.avr-gcc.path} . Platforms definitions \u00b6 Finally, let's see how PLATFORMS are made. { \"name\" : \"Arduino AVR Boards\" , \"architecture\" : \"avr\" , \"version\" : \"1.6.6\" , \"category\" : \"Arduino\" , \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"url\" : \"http://downloads.arduino.cc/cores/avr-1.6.6.tar.bz2\" , \"archiveFileName\" : \"avr-1.6.6.tar.bz2\" , \"checksum\" : \"SHA-256:08ad5db4978ebea22344edc5d77dce0923d8a644da7a14dc8072e883c76058d8\" , \"size\" : \"4876916\" , \"boards\" : [ { \"name\" : \"Arduino Y\u00fan\" }, { \"name\" : \"Arduino Uno\" }, { \"name\" : \"Arduino Diecimila\" }, { \"name\" : \"Arduino Nano\" }, { \"name\" : \"Arduino Mega\" }, { \"name\" : \"Arduino MegaADK\" }, { \"name\" : \"Arduino Leonardo\" }, ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } , Each PLATFORM describes a core for a specific architecture. The fields needed are: name : the extended name of the platform that is displayed on the Boards Manager GUI architecture : is the architecture of the plaftorm (avr, sam, etc...). It must match the architecture of the core as explained in the Arduino platform specification version : the version of the platform. category : this field is reserved, a 3 rd party core must set it to Contributed help / online : is a URL that is displayed on the Boards Manager as an \"Online Help\" link url , archiveFileName , size and checksum : metadata of the core archive file. The meaning is the same as for the TOOLS boards : the list of boards supported (note: just the names to display on the GUI! the real boards definitions are inside boards.txt inside the core archive file) toolsDependencies : the tools needed by this core. Each tool is referenced by the triple ( packager , name , version ) as previously said. Note that you can reference tools available in other packages as well. The version field is validated by both Arduino IDE and JSemVer . Here are the rules Arduino IDE follows for parsing versions ( source ): Split the version at the - character and continue with the first part. If there are no dots ( . ), parse version as an integer and form a Version from that integer using Version.forIntegers If there is one dot, split version into two, parse each part as an integer, and form a Version from those integers using Version.forIntegers Otherwise, simply parse version into a Version using Version.valueOf Note: if you miss a bracket in the JSON index, then add the URL to your Preferences, and open Boards Manager it can cause the Arduino IDE to no longer load until you have deleted the file from your arduino15 folder. Example JSON index file \u00b6 { \"packages\" : [ { \"name\" : \"myboard\" , \"maintainer\" : \"Jane Developer\" , \"websiteURL\" : \"https://github.com/janedeveloper/myboard\" , \"email\" : \"jane@janedeveloper.org\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"platforms\" : [ { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.0\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.0.zip\" , \"archiveFileName\" : \"myboard-1.0.0.zip\" , \"checksum\" : \"SHA-256:ec3ff8a1dc96d3ba6f432b9b837a35fd4174a34b3d2927de1d51010e8b94f9f1\" , \"size\" : \"15005\" , \"boards\" : [ { \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" } ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] }, { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.1\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.1.zip\" , \"archiveFileName\" : \"myboard-1.0.1.zip\" , \"checksum\" : \"SHA-256:9c86ee28a7ce9fe33e8b07ec643316131e0031b0d22e63bb398902a5fdadbca9\" , \"size\" : \"15125\" , \"boards\" : [ { \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" } ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } ], \"tools\" :[] } ] } In the example there is one PACKAGE , My Board. The package is compatible with the AVR architecture. There are two versions of the PACKAGE , 1.0.0 and 1.0.1. No TOOLS needed to be installed so that section was left blank. Here is the Boards Manager entry created by the example: Installation archive structure \u00b6 The installation archives contain the Board support files. Supported formats are .zip, .tar.bz2, and .tar.gz. The folder structure of the core archive is slightly different from the standard manually installed Arduino 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level. After adding Boards Manager support for your boards, please share the JSON index file URL on the Unofficial list of 3 rd party boards support urls .","title":"package_index.json specification"},{"location":"package_index_json-specification/#naming-of-the-json-index-file","text":"The IDE may use many different index files coming from different vendors, so each vendor should name his own index file in a way that won't conflict with others. The file must be named as follows: package_YOURNAME_PACKAGENAME_index.json The prefix package_ and the postfix _index.json are mandatory (otherwise the index file is not recognised by the IDE) while the choice of YOURNAME_PACKAGENAME is left to the packager. We suggest using a domain name owned by the packager. For example: package_arduino.cc_index.json or package_example.com_avr_boards_index.json The index URL is periodically checked for updates so expect a constant flow of downloads (proportional to the number of active users).","title":"Naming of the JSON index file"},{"location":"package_index_json-specification/#json-index-file-contents","text":"The root of the JSON index is an array of packages : { \"packages\" : [ PACKAGE_XXXX ] } 3 rd party vendors should use a single PACKAGE_XXXX that is a dictionary map with the vendor's metadata, a list of PLATFORMS and a list of TOOLS . For example: { \"name\" : \"arduino\" , \"maintainer\" : \"Arduino LLC\" , \"websiteURL\" : \"http://www.arduino.cc/\" , \"email\" : \"packages@arduino.cc\" , \"platforms\" : [ PLATFORM_AVR , PLATFORM_ARM , PLATFORM_XXXXX , PLATFORM_YYYYY , ], \"tools\" : [ TOOLS_COMPILER_AVR , TOOLS_UPLOADER_AVR , TOOLS_COMPILER_ARM , TOOLS_XXXXXXX , TOOLS_YYYYYYY , ], } The metadata fields are: name : the folder used for the installed cores. The vendor folder name of the installed package is determined by this field maintainer : the extended name of the vendor that is displayed on the Boards Manager GUI websiteURL : the URL to the vendor's website, appears on the Boards Manager as a \"More info\" link email : the email of the vendor/maintainer Now, before looking at PLATFORMS , let's explore first how TOOLS are made.","title":"JSON Index file contents"},{"location":"package_index_json-specification/#tools-definitions","text":"Each tool describes a binary distribution of a command line tool. A tool can be: a compiler toolchain an uploader a file preprocessor a debugger a program that performs a firmware upgrade basically anything that can run on the user's host PC and do something useful. For example, Arduino uses two command line tools for the AVR boards: avr-gcc (the compiler) and avrdude (the uploader). Tools are mapped as JSON in this way: { \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" , \"systems\" : [ { \"host\" : \"i386-apple-darwin11\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-i386-apple-darwin11.tar.bz2\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-i386-apple-darwin11.tar.bz2\" , \"size\" : \"24437400\" , \"checksum\" : \"SHA-256:111b3ef00d737d069eb237a8933406cbb928e4698689e24663cffef07688a901\" }, { \"host\" : \"x86_64-linux-gnu\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-x86_64-pc-linux-gnu.tar.bz2\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-x86_64-pc-linux-gnu.tar.bz2\" , \"size\" : \"27093036\" , \"checksum\" : \"SHA-256:9054fcc174397a419ba56c4ce1bfcbcad275a6a080cc144905acc9b0351ee9cc\" }, { \"host\" : \"i686-linux-gnu\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-i686-pc-linux-gnu.tar.bz2\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-i686-pc-linux-gnu.tar.bz2\" , \"size\" : \"25882375\" , \"checksum\" : \"SHA-256:7648b7f549b37191da0b0be53bae791b652f82ac3cb4e7877f85075aaf32141f\" }, { \"host\" : \"i686-mingw32\" , \"url\" : \"http://downloads.arduino.cc/tools/avr-gcc-4.8.1-arduino5-i686-mingw32.zip\" , \"archiveFileName\" : \"avr-gcc-4.8.1-arduino5-i686-mingw32.zip\" , \"size\" : \"46044779\" , \"checksum\" : \"SHA-256:d4303226a7b41d3c445d901b5aa5903458def3fc7b7ff4ffef37cabeb37d424d\" } ] } , The field name and version are respectively the name and version of the tool. Each tool is uniquely identified by the triple ( vendor , name , version ) and there can be many different versions of the same tool available at the same time, for example: ( arduino , avr-gcc , 4.8.1-arduino2 ) ( arduino , avr-gcc , 4.8.1-arduino3 ) ( arduino , avr-gcc , 4.8.1-arduino5 ) ( arduino , avrdude , 5.11 ) ( arduino , avrdude , 6.0 ) ( arduino , avrdude , 6.1 ) ..... Each tool version may come in different build flavours for different OS. Each flavour is listed under the systems array. In the example above avr-gcc comes with builds for: Linux 64-bit ( x86_64-linux-gnu ), Linux 32-bit ( i686-linux-gnu ), Windows ( i686-mingw32 ), Mac ( i386-apple-darwin11 ) The IDE will take care to install the right flavour based on the host value, or fail if a needed flavour is missing. Note that the IDE does not use this information to select the toolchain during verify. If you want the IDE to use this specific version you should use the notation {runtime.tools.TOOLNAME-VERSION.path} in the platform.txt. The other fields are: url : the download URL of the tool's archive archiveFileName : the name of the file saved to disk after the download (some web servers don't provide the filename through the HTTP request) size : the size of the archive in bytes checksum : the checksum of the archive, used to check if the file has been corrupted. The format is ALGORITHM:CHECKSUM , currently MD5 , SHA-1 , SHA-256 algorithm are supported, we recommend SHA-256 . On *nix or MacOSX you may be able to use the command shasum -a 256 filename to generate SHA-256 checksums. There are many free options for Windows including md5deep, there are also online utilities for generating checksums.","title":"Tools definitions"},{"location":"package_index_json-specification/#how-a-tools-path-is-determined-in-platformtxt","text":"When the IDE needs a tool it downloads the corresponding archive file and unpacks the content into a private folder that can be referenced from platform.txt using one of the following properties: {runtime.tools.TOOLNAME-VERSION.path} {runtime.tools.TOOLNAME.path} For example to obtain the avr-gcc 4.8.1 folder we can use {runtime.tools.avr-gcc-4.8.1-arduino5.path} or {runtime.tools.avr-gcc.path} .","title":"How a tool's path is determined in platform.txt"},{"location":"package_index_json-specification/#platforms-definitions","text":"Finally, let's see how PLATFORMS are made. { \"name\" : \"Arduino AVR Boards\" , \"architecture\" : \"avr\" , \"version\" : \"1.6.6\" , \"category\" : \"Arduino\" , \"help\" : { \"online\" : \"http://www.arduino.cc/en/Reference/HomePage\" }, \"url\" : \"http://downloads.arduino.cc/cores/avr-1.6.6.tar.bz2\" , \"archiveFileName\" : \"avr-1.6.6.tar.bz2\" , \"checksum\" : \"SHA-256:08ad5db4978ebea22344edc5d77dce0923d8a644da7a14dc8072e883c76058d8\" , \"size\" : \"4876916\" , \"boards\" : [ { \"name\" : \"Arduino Y\u00fan\" }, { \"name\" : \"Arduino Uno\" }, { \"name\" : \"Arduino Diecimila\" }, { \"name\" : \"Arduino Nano\" }, { \"name\" : \"Arduino Mega\" }, { \"name\" : \"Arduino MegaADK\" }, { \"name\" : \"Arduino Leonardo\" }, ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } , Each PLATFORM describes a core for a specific architecture. The fields needed are: name : the extended name of the platform that is displayed on the Boards Manager GUI architecture : is the architecture of the plaftorm (avr, sam, etc...). It must match the architecture of the core as explained in the Arduino platform specification version : the version of the platform. category : this field is reserved, a 3 rd party core must set it to Contributed help / online : is a URL that is displayed on the Boards Manager as an \"Online Help\" link url , archiveFileName , size and checksum : metadata of the core archive file. The meaning is the same as for the TOOLS boards : the list of boards supported (note: just the names to display on the GUI! the real boards definitions are inside boards.txt inside the core archive file) toolsDependencies : the tools needed by this core. Each tool is referenced by the triple ( packager , name , version ) as previously said. Note that you can reference tools available in other packages as well. The version field is validated by both Arduino IDE and JSemVer . Here are the rules Arduino IDE follows for parsing versions ( source ): Split the version at the - character and continue with the first part. If there are no dots ( . ), parse version as an integer and form a Version from that integer using Version.forIntegers If there is one dot, split version into two, parse each part as an integer, and form a Version from those integers using Version.forIntegers Otherwise, simply parse version into a Version using Version.valueOf Note: if you miss a bracket in the JSON index, then add the URL to your Preferences, and open Boards Manager it can cause the Arduino IDE to no longer load until you have deleted the file from your arduino15 folder.","title":"Platforms definitions"},{"location":"package_index_json-specification/#example-json-index-file","text":"{ \"packages\" : [ { \"name\" : \"myboard\" , \"maintainer\" : \"Jane Developer\" , \"websiteURL\" : \"https://github.com/janedeveloper/myboard\" , \"email\" : \"jane@janedeveloper.org\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"platforms\" : [ { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.0\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.0.zip\" , \"archiveFileName\" : \"myboard-1.0.0.zip\" , \"checksum\" : \"SHA-256:ec3ff8a1dc96d3ba6f432b9b837a35fd4174a34b3d2927de1d51010e8b94f9f1\" , \"size\" : \"15005\" , \"boards\" : [ { \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" } ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] }, { \"name\" : \"My Board\" , \"architecture\" : \"avr\" , \"version\" : \"1.0.1\" , \"category\" : \"Contributed\" , \"help\" : { \"online\" : \"http://janedeveloper.org/forum/myboard\" }, \"url\" : \"https://janedeveloper.github.io/myboard/myboard-1.0.1.zip\" , \"archiveFileName\" : \"myboard-1.0.1.zip\" , \"checksum\" : \"SHA-256:9c86ee28a7ce9fe33e8b07ec643316131e0031b0d22e63bb398902a5fdadbca9\" , \"size\" : \"15125\" , \"boards\" : [ { \"name\" : \"My Board\" }, { \"name\" : \"My Board Pro\" } ], \"toolsDependencies\" : [ { \"packager\" : \"arduino\" , \"name\" : \"avr-gcc\" , \"version\" : \"4.8.1-arduino5\" }, { \"packager\" : \"arduino\" , \"name\" : \"avrdude\" , \"version\" : \"6.0.1-arduino5\" } ] } ], \"tools\" :[] } ] } In the example there is one PACKAGE , My Board. The package is compatible with the AVR architecture. There are two versions of the PACKAGE , 1.0.0 and 1.0.1. No TOOLS needed to be installed so that section was left blank. Here is the Boards Manager entry created by the example:","title":"Example JSON index file"},{"location":"package_index_json-specification/#installation-archive-structure","text":"The installation archives contain the Board support files. Supported formats are .zip, .tar.bz2, and .tar.gz. The folder structure of the core archive is slightly different from the standard manually installed Arduino 1.5+ compatible hardware folder structure. You must remove the architecture folder(e.g., avr or arm ), moving all the files and folders within the architecture folder up a level. After adding Boards Manager support for your boards, please share the JSON index file URL on the Unofficial list of 3 rd party boards support urls .","title":"Installation archive structure"},{"location":"platform-specification/","text":"This specification is a 3 rd party hardware format to be used in Arduino IDE starting from 1.5.x series. This specification allows a 3 rd party vendor/maintainer to add support for new boards inside the Arduino IDE by providing a file to unzip into the hardware folder of Arduino's sketchbook folder. It is also possible to add new 3 rd party boards by providing just one configuration file. Hardware Folders structure \u00b6 The new hardware folders have a hierarchical structure organized in two levels: the first level is the vendor/maintainer the second level is the supported architecture A vendor/maintainer can have multiple supported architectures. For example, below we have three hardware vendors called \"arduino\", \"yyyyy\" and \"xxxxx\": hardware/arduino/avr/... - Arduino - AVR Boards hardware/arduino/sam/... - Arduino - SAM (32bit ARM) Boards hardware/yyyyy/avr/... - Yyy - AVR hardware/xxxxx/avr/... - Xxx - AVR The vendor \"arduino\" has two supported architectures (AVR and SAM), while \"xxxxx\" and \"yyyyy\" have only AVR. If possible, follow existing architecture name conventions when creating hardware packages. The architecture folder name is used to determine library compatibility and also to permit referencing resources from another core of the same architecture so using a non-standard architecture name can only be harmful to your users. Architecture values are case sensitive (e.g. AVR != avr ). Use the vendor folder name to differentiate your package, NOT the architecture name. Architecture configurations \u00b6 Each architecture must be configured through a set of configuration files: platform.txt contains definitions for the CPU architecture used (compiler, build process parameters, tools used for upload, etc.) boards.txt contains definitions for the boards (board name, parameters for building and uploading sketches, etc.) programmers.txt contains definitions for external programmers (typically used to burn bootloaders or sketches on a blank CPU/board) Configuration files format \u00b6 A configuration file is a list of \"key=value\" properties. The value of a property can be expressed using the value of another property by putting its name inside brackets \"{\" \"}\". For example: compiler.path=/tools/g++_arm_none_eabi/bin/ compiler.c.cmd=arm-none-eabi-gcc [....] recipe.c.o.pattern={compiler.path}{compiler.c.cmd} In this example the property recipe.c.o.pattern will be set to /tools/g++_arm_none_eabi/bin/arm-none-eabi-gcc that is the composition of the two properties compiler.path and compiler.c.cmd . Comments \u00b6 Lines starting with # are treated as comments and will be ignored. # Like in this example # -------------------- # I'm a comment! Automatic property override for specific OS \u00b6 We can specify an OS-specific value for a property. For example the following file: tools.bossac.cmd=bossac tools.bossac.cmd.windows=bossac.exe will set the property tools.bossac.cmd to the value bossac on Linux and Mac OS and bossac.exe on Windows. Suffixes supported are .linux , .windows and .macosx . Global Predefined properties \u00b6 The Arduino IDE sets the following properties that can be used globally in all configuration files: {runtime.platform.path} : the absolute path of the board platform folder (i.e. the folder containing boards.txt) {runtime.hardware.path} : the absolute path of the hardware folder (i.e. the folder containing the board platform folder) {runtime.ide.path} : the absolute path of the Arduino IDE folder {runtime.ide.version} : the version number of the Arduino IDE as a number (this uses two digits per version number component, and removes the points and leading zeroes, so Arduino IDE 1.8.3 becomes 01.08.03 which becomes runtime.ide.version=10803 ). {ide_version} : Compatibility alias for {runtime.ide.version} {runtime.os} : the running OS (\"linux\", \"windows\", \"macosx\") Compatibility note: Versions before 1.6.0 only used one digit per version number component in {runtime.ide.version} (so 1.5.9 was 159 , not 10509 ). platform.txt \u00b6 The platform.txt file contains information about a platform's specific aspects (compilers command line flags, paths, system libraries, etc.). The following meta-data must be defined: name=Arduino AVR Boards version=1.5.3 The name will be shown in the Boards menu of the Arduino IDE. The version is currently unused, it is reserved for future use (probably together with the Boards Manager to handle dependencies on cores). Build process \u00b6 The platform.txt file is used to configure the build process performed by the Arduino IDE. This is done through a list of recipes . Each recipe is a command line expression that explains how to call the compiler (or other tools) for every build step and which parameter should be passed. The Arduino IDE, before starting the build, determines the list of files to compile. The list is composed of: the user's Sketch source code in the selected board's Core source code in the Libraries used in the sketch The IDE creates a temporary folder to store the build artifacts whose path is available through the global property {build.path} . A property {build.project_name} with the name of the project and a property {build.arch} with the name of the architecture is set as well. {build.path} : The path to the temporary folder to store build artifacts {build.project_name} : The project name {build.arch} : The MCU architecture (avr, sam, etc...) There are some other {build.xxx} properties available, that are explained in the boards.txt section of this guide. Recipes to compile source code \u00b6 We said that the Arduino IDE determines a list of files to compile. Each file can be source code written in C (.c files), C++ (.cpp files) or Assembly (.S files). Every language is compiled using its respective recipe : recipe.c.o.pattern : for C files recipe.cpp.o.pattern : for CPP files recipe.S.o.pattern : for Assembly files The recipes can be built concatenating other properties set by the IDE (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {object_file} : the path to the output file For example the following is used for AVR: ## Compiler global definitions compiler.path={runtime.ide.path}/tools/avr/bin/ compiler.c.cmd=avr-gcc compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD [......] ## Compile c files recipe.c.o.pattern=\"{compiler.path}{compiler.c.cmd}\" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} \"{source_file}\" -o \"{object_file}\" Note that some properties, like {build.mcu} for example, are taken from the boards.txt file which is documented later in this specification. Recipes to build the core.a archive file \u00b6 The core of the selected board is compiled as described in the previous paragraph, but the object files obtained from the compile are also archived into a static library named core.a using the recipe.ar.pattern . The recipe can be built concatenating the following properties set by the IDE: {object_file} : the object file to include in the archive {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the resulting archive (ex. \"core.a\") For example, Arduino provides the following for AVR: compiler.ar.cmd=avr-ar compiler.ar.flags=rcs [......] ## Create archives recipe.ar.pattern=\"{compiler.path}{compiler.ar.cmd}\" {compiler.ar.flags} \"{archive_file_path}\" \"{object_file}\" Recipes for linking \u00b6 All the artifacts produced by the previous steps (sketch object files, libraries object files and core.a archive) are linked together using the recipe.c.combine.pattern . The recipe can be built concatenating the following properties set by the IDE: {object_files} : the list of object files to include in the archive (\"file1.o file2.o ....\") {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the core archive file (ex. \"core.a\") For example the following is used for AVR: compiler.c.elf.flags=-Os -Wl,--gc-sections compiler.c.elf.cmd=avr-gcc [......] ## Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" {compiler.c.elf.flags} -mmcu={build.mcu} -o \"{build.path}/{build.project_name}.elf\" {object_files} \"{archive_file_path}\" \"-L{build.path}\" -lm Recipes for extraction of executable files and other binary data \u00b6 An arbitrary number of extra steps can be performed by the IDE at the end of objects linking. These steps can be used to extract binary data used for upload and they are defined by a set of recipes with the following format: recipe.objcopy.FILE_EXTENSION_1.pattern=[.....] recipe.objcopy.FILE_EXTENSION_2.pattern=[.....] [.....] FILE_EXTENSION_x must be replaced with the extension of the extracted file, for example the AVR platform needs two files a .hex and a .eep , so we made two recipes like: recipe.objcopy.eep.pattern=[.....] recipe.objcopy.hex.pattern=[.....] There are no specific properties set by the IDE here. A full example for the AVR platform can be: ## Create eeprom recipe.objcopy.eep.pattern=\"{compiler.path}{compiler.objcopy.cmd}\" {compiler.objcopy.eep.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.eep\" ## Create hex recipe.objcopy.hex.pattern=\"{compiler.path}{compiler.elf2hex.cmd}\" {compiler.elf2hex.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.hex\" Recipes to compute binary sketch size \u00b6 At the end of the build the Arduino IDE shows the final binary sketch size to the user. The size is calculated using the recipe recipe.size.pattern . The output of the command executed using the recipe is parsed through the regular expression set in the property recipe.size.regex . The regular expression must match the sketch size. For AVR we have: compiler.size.cmd=avr-size [....] ## Compute size recipe.size.pattern=\"{compiler.path}{compiler.size.cmd}\" -A \"{build.path}/{build.project_name}.hex\" recipe.size.regex=Total\\s+([0-9]+).* Recipes to export compiled binary \u00b6 When you do a Sketch > Export compiled Binary , the compiled binary is copied from the build folder to the sketch folder. Two binaries are copied; the standard binary, and a binary that has been merged with the bootloader file (identified by the .with_bootloader in the filename). Two recipes affect how Export compiled Binary works: recipe.output.tmp_file : Defines the binary's filename in the build folder. recipe.output.save_file : Defines the filename to use when copying the binary file to the sketch folder. As with other processes, there are pre and post build hooks for Export compiled Binary . The recipe.hooks.savehex.presavehex.NUMBER.pattern and recipe.hooks.savehex.postsavehex.NUMBER.pattern hooks (but not recipe.output.tmp_file and recipe.output.save_file ) can be built concatenating the following properties set by the IDE: {sketch_path} - the absolute path of the sketch folder Recipe to run the preprocessor \u00b6 For detecting what libraries to include in the build, and for generating function prototypes, the Arduino IDE must be able to run (just) the preprocessor. For this, the recipe.preproc.macros recipe exists. This recipe must run the preprocessor on a given source file, writing the preprocessed output to a given output file, and generate (only) preprocessor errors on standard output. This preprocessor run should happen with the same defines and other preprocessor-influencing-options as for normally compiling the source files. The recipes can be built concatenating other properties set by the IDE (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {preprocessed_file_path} : the path to the output file For example the following is used for AVR: preproc.macros.flags=-w -x c++ -E -CC recipe.preproc.macros=\"{compiler.path}{compiler.cpp.cmd}\" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} \"{source_file}\" -o \"{preprocessed_file_path}\" Note that the {preprocessed_file_path} might point to (your operating system's equivalent) of /dev/null . In this case, also passing -MMD to gcc is problematic, as it will try to generate a dependency file called /dev/null.d , which will usually result in a permission error. Since platforms typically include {compiler.cpp.flags} here, which includes -MMD , the Arduino IDE automatically filters out the -MMD option from the recipe.preproc.macros recipe to prevent this error. Note that older IDE versions used the recipe.preproc.includes recipe to determine includes, which is undocumented here. Since Arduino IDE 1.6.7 (arduino-builder 1.2.0) this was changed and recipe.preproc.includes is no longer used. Pre and post build hooks (since IDE 1.6.5) \u00b6 You can specify pre and post actions around each recipe. These are called \"hooks\". Here is the complete list of available hooks: recipe.hooks.sketch.prebuild.NUMBER.pattern (called before sketch compilation) recipe.hooks.sketch.postbuild.NUMBER.pattern (called after sketch compilation) recipe.hooks.libraries.prebuild.NUMBER.pattern (called before libraries compilation) recipe.hooks.libraries.postbuild.NUMBER.pattern (called after libraries compilation) recipe.hooks.core.prebuild.NUMBER.pattern (called before core compilation) recipe.hooks.core.postbuild.NUMBER.pattern (called after core compilation) recipe.hooks.linking.prelink.NUMBER.pattern (called before linking) recipe.hooks.linking.postlink.NUMBER.pattern (called after linking) recipe.hooks.objcopy.preobjcopy.NUMBER.pattern (called before objcopy recipes execution) recipe.hooks.objcopy.postobjcopy.NUMBER.pattern (called after objcopy recipes execution) recipe.hooks.savehex.presavehex.NUMBER.pattern (called before savehex recipe execution) recipe.hooks.savehex.postsavehex.NUMBER.pattern (called after savehex recipe execution) Example: you want to execute 2 commands before sketch compilation and 1 after linking. You'll add to your platform.txt recipe.hooks.sketch.prebuild.1.pattern=echo sketch compilation started at recipe.hooks.sketch.prebuild.2.pattern=date recipe.hooks.linking.postlink.1.pattern=echo linking is complete Warning: hooks recipes are sorted before execution. If you need to write more than 10 recipes for a single hook, pad the number with a zero, for example: recipe.hooks.sketch.prebuild.01.pattern=echo 1 recipe.hooks.sketch.prebuild.02.pattern=echo 2 ... recipe.hooks.sketch.prebuild.11.pattern=echo 11 Global platform.txt \u00b6 Properties defined in a platform.txt created in the hardware subfolder of the IDE installation folder will be used for all platforms and will override local properties. platform.local.txt \u00b6 Introduced in Arduino IDE 1.5.7. This file can be used to override properties defined in platform.txt or define new properties without modifying platform.txt (e.g. when platform.txt is tracked by a version control system). It should be placed in the architecture folder. boards.txt \u00b6 This file contains definitions and meta-data for the boards supported. Every board must be referred through its short name, the board ID. The settings for a board are defined through a set of properties with keys having the board ID as prefix. For example the board ID chosen for the Arduino Uno board is \"uno\". An extract of the Uno board configuration in boards.txt looks like: [......] uno.name=Arduino Uno uno.build.mcu=atmega328p uno.build.f_cpu=16000000L uno.build.board=AVR_UNO uno.build.core=arduino uno.build.variant=standard [......] Note that all the relevant keys start with the board ID uno.xxxxx . The uno.name property contains the name of the board shown in the Board menu of the Arduino IDE. The uno.build.board property is used to set a compile-time variable ARDUINO_{build.board} to allow use of conditional code between #ifdef s. The Arduino IDE automatically generates a build.board value if not defined. In this case the variable defined at compile time will be ARDUINO_AVR_UNO . The other properties will override the corresponding global properties of the IDE when the user selects the board. These properties will be globally available, in other configuration files too, without the board ID prefix: uno.build.mcu => build.mcu uno.build.f_cpu => build.f_cpu uno.build.board => build.board uno.build.core => build.core uno.build.variant => build.variant This explains the presence of {build.mcu} or {build.board} in the platform.txt recipes: their value is overwritten respectively by {uno.build.mcu} and {uno.build.board} when the Uno board is selected! Moreover the IDE automatically provides the following properties: {build.core.path} : The path to the selected board's core folder (inside the core platform , for example hardware/arduino/avr/core/arduino) {build.system.path} : The path to the core platform 's system folder if available (for example hardware/arduino/sam/system) {build.variant.path} : The path to the selected board variant folder (inside the variant platform , for example hardware/arduino/avr/variants/micro) Cores \u00b6 Cores are placed inside the cores subfolder. Many different cores can be provided within a single platform. For example the following could be a valid platform layout: hardware/arduino/avr/cores/ : Cores folder for \"avr\" architecture, package \"arduino\" hardware/arduino/avr/cores/arduino : the Arduino Core hardware/arduino/avr/cores/rtos : an hypothetical RTOS Core The board's property build.core is used by the Arduino IDE to find the core that must be compiled and linked when the board is selected. For example if a board needs the Arduino core the build.core variable should be set to: uno.build.core=arduino or if the RTOS core is needed, to: uno.build.core=rtos In any case the contents of the selected core folder are compiled and the core folder path is added to the include files search path. Core Variants \u00b6 Sometimes a board needs some tweaking on default core configuration (different pin mapping is a typical example). A core variant folder is an additional folder that is compiled together with the core and allows to easily add specific configurations. Variants must be placed inside the variants folder in the current architecture. For example, Arduino AVR Boards uses: hardware/arduino/avr/cores : Core folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/cores/arduino : The Arduino core hardware/arduino/avr/variants/ : Variant folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/variants/standard : ATmega328 based variants hardware/arduino/avr/variants/leonardo : ATmega32U4 based variants In this example, the Arduino Uno board needs the standard variant so the build.variant property is set to standard : [.....] uno.build.core=arduino uno.build.variant=standard [.....] instead, the Arduino Leonardo board needs the leonardo variant: [.....] leonardo.build.core=arduino leonardo.build.variant=leonardo [.....] In the example above, both Uno and Leonardo share the same core but use different variants. In any case, the contents of the selected variant folder path is added to the include search path and its contents are compiled and linked with the sketch. The parameter build.variant.path is automatically found by the IDE. Tools \u00b6 The Arduino IDE uses external command line tools to upload the compiled sketch to the board or to burn bootloaders using external programmers. Currently avrdude is used for AVR based boards and bossac for SAM based boards, but there is no limit, any command line executable can be used. The command line parameters are specified using recipes in the same way used for platform build process. Tools are configured inside the platform.txt file. Every Tool is identified by a short name, the Tool ID. A tool can be used for different purposes: upload a sketch to the target board (using a bootloader preinstalled on the board) program a sketch to the target board using an external programmer erase the target board's flash memory using an external programmer burn a bootloader into the target board using an external programmer Each action has its own recipe and its configuration is done through a set of properties having key starting with tools prefix followed by the tool ID and the action: [....] tools.avrdude.upload.pattern=[......] [....] tools.avrdude.program.pattern=[......] [....] tools.avrdude.erase.pattern=[......] [....] tools.avrdude.bootloader.pattern=[......] [.....] A tool may have some actions not defined (it's not mandatory to define all four actions). Let's look at how the upload action is defined for avrdude: tools.avrdude.path={runtime.tools.avrdude.path} tools.avrdude.cmd.path={path}/bin/avrdude tools.avrdude.config.path={path}/etc/avrdude.conf tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" A {runtime.tools.TOOL_NAME.path} and {runtime.tools.TOOL_NAME-TOOL_VERSION.path} property is generated for the tools of Arduino AVR Boards and any other platform installed via Boards Manager. {runtime.tools.TOOL_NAME.path} points to the latest version of the tool available. The Arduino IDE makes the tool configuration properties available globally without the prefix. For example, the tools.avrdude.cmd.path property can be used as {cmd.path} inside the recipe, and the same happens for all the other avrdude configuration variables. Verbose parameter \u00b6 It is possible for the user to enable verbosity from the Arduino IDE's Preferences panel. This preference is transferred to the command line by the IDE using the ACTION.verbose property (where ACTION is the action we are considering). When the verbose mode is enabled the tools.TOOL_ID.ACTION.params.verbose property is copied into ACTION.verbose . When the verbose mode is disabled, the tools.TOOL_ID.ACTION.params.quiet property is copied into ACTION.verbose . Confused? Maybe an example will clear things: tools.avrdude.upload.params.verbose=-v -v -v -v tools.avrdude.upload.params.quiet=-q -q tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" In this example if the user enables verbose mode, then {upload.params.verbose} is used in {upload.verbose} : tools.avrdude.upload.params.verbose => upload.verbose If the user didn't enable verbose mode, then {upload.params.quiet} is used in {upload.verbose} : tools.avrdude.upload.params.quiet => upload.verbose Sketch upload configuration \u00b6 The Upload action is triggered when the user clicks on the \"Upload\" button on the IDE toolbar. The Arduino IDE selects the tool to be used for upload by looking at the upload.tool property. A specific upload.tool property should be defined for every board in boards.txt: [......] uno.upload.tool=avrdude [......] leonardo.upload.tool=avrdude [......] Also other upload parameters can be defined together, for example in the Arduino AVR Boards boards.txt we have: [.....] uno.name=Arduino Uno uno.upload.tool=avrdude uno.upload.protocol=arduino uno.upload.maximum_size=32256 uno.upload.speed=115200 [.....] leonardo.name=Arduino Leonardo leonardo.upload.tool=avrdude leonardo.upload.protocol=avr109 leonardo.upload.maximum_size=28672 leonardo.upload.speed=57600 leonardo.upload.use_1200bps_touch=true leonardo.upload.wait_for_upload_port=true [.....] Most {upload.XXXX} variables are used later in the avrdude upload recipe in platform.txt: [.....] tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" [.....] 1200 bps bootloader reset \u00b6 Most Arduino boards use a dedicated USB-to-serial chip, that takes care of restarting the main MCU (starting the bootloader) when the serial port is opened. However, boards that have a native USB connection (such as the Leonardo or Zero) will have to disconnect from USB when rebooting into the bootloader (after which the bootloader reconnects to USB and offers a new serial port for uploading). After the upload is complete, the bootloader disconnects from USB again, starts the sketch, which then reconnects to USB. Because of these reconnections, the standard restart-on-serial open will not work, since that would cause the serial port to disappear and be closed again. Instead, the sketch running on these boards interprets a bitrate of 1200 bps as a signal the bootloader should be started. To let the IDE perform these steps, two board parameters can be set: use_1200bps_touch causes the IDE to briefly open the selected serial port at 1200 bps (8N1) before starting the upload. wait_for_upload_port causes the IDE to wait for the serial port to (re)appear before and after the upload. This is only used when use_1200bps_touch is also set. When set, after doing the 1200 bps touch, the IDE will wait for a new serial port to appear and use that as the port for uploads. Alternatively, if the original port does not disappear within a few seconds, the upload continues with the original port (which can be the case if the board was already put into bootloader manually, or the IDE missed the disconnect and reconnect). Additionally, after the upload is complete, the IDE again waits for a new port to appear (or the originally selected port to be present). Note that the IDE implementation of this 1200 bps touch has some peculiarities, and the newer arduino-cli implementation also seems different (does not wait for the port after the reset, which is probably only needed in the IDE to prevent opening the wrong port on the serial monitor, and does not have a shorter timeout when the port never disappears). Serial port \u00b6 The Arduino IDE auto-detects all available serial ports on the running system and lets the user choose one from the GUI. The selected port is available as a configuration property {serial.port} . Upload using an external programmer \u00b6 TODO... The platform.txt associated with the selected programmer will be used. Burn Bootloader \u00b6 TODO... The platform.txt associated with the selected board will be used. Custom board menus \u00b6 The Arduino IDE allows adding extra menu items under the Tools menu. With these sub-menus the user can select different configurations for a specific board (for example a board could be provided in two or more variants with different CPUs, or may have different crystal speed based on the board model, and so on...). Let's see an example of how a custom menu is implemented. The board used in the example is the Arduino Duemilanove. This board was produced in two models, one with an ATmega168 CPU and another with an ATmega328P. We are going then to define a custom menu \"Processor\" that allows the user to choose between the two different microcontrollers. We must first define a set of menu.MENU_ID=Text properties. Text is what is displayed on the GUI for every custom menu we are going to create and must be declared at the beginning of the boards.txt file: menu.cpu=Processor [.....] in this case we declare only one custom menu \"Processor\" which we refer using the \"cpu\" MENU_ID. Now let's add, always in the boards.txt file, the default configuration (common to all processors) for the duemilanove board: menu.cpu=Processor [.....] duemilanove.name=Arduino Duemilanove duemilanove.upload.tool=avrdude duemilanove.upload.protocol=arduino duemilanove.build.f_cpu=16000000L duemilanove.build.board=AVR_DUEMILANOVE duemilanove.build.core=arduino duemilanove.build.variant=standard [.....] Now let's define the options to show in the \"Processor\" menu: [.....] duemilanove.menu.cpu.atmega328=ATmega328P [.....] duemilanove.menu.cpu.atmega168=ATmega168 [.....] We have defined two options: \"ATmega328P\" and \"ATmega168\". Note that the property keys must follow the format BOARD_ID.menu.MENU_ID.OPTION_ID=Text . Finally, the specific configuration for every option: [.....] ## Arduino Duemilanove w/ ATmega328P duemilanove.menu.cpu.atmega328=ATmega328P duemilanove.menu.cpu.atmega328.upload.maximum_size=30720 duemilanove.menu.cpu.atmega328.upload.speed=57600 duemilanove.menu.cpu.atmega328.build.mcu=atmega328p ## Arduino Duemilanove w/ ATmega168 duemilanove.menu.cpu.atmega168=ATmega168 duemilanove.menu.cpu.atmega168.upload.maximum_size=14336 duemilanove.menu.cpu.atmega168.upload.speed=19200 duemilanove.menu.cpu.atmega168.build.mcu=atmega168 [.....] Note that when the user selects an option, all the \"sub properties\" of that option are copied in the global configuration. For example when the user selects \"ATmega168\" from the \"Processor\" menu the Arduino IDE makes the configuration under atmega168 available globally: duemilanove.menu.cpu.atmega168.upload.maximum_size => upload.maximum_size duemilanove.menu.cpu.atmega168.upload.speed => upload.speed duemilanove.menu.cpu.atmega168.build.mcu => build.mcu There is no limit to the number of custom menus that can be defined. TODO: add an example with more than one submenu Referencing another core, variant or tool \u00b6 Inside the boards.txt we can define a board that uses a core provided by another vendor/mantainer using the syntax VENDOR_ID:CORE_ID . For example, if we want to define a board that uses the \"arduino\" core from the \"arduino\" vendor we should write: [....] myboard.name=My Wonderful Arduino Compatible board myboard.build.core=arduino:arduino [....] Note that we don't need to specify any architecture since the same architecture of \"myboard\" is used, so we just say \"arduino:arduino\" instead of \"arduino:avr:arduino\". The platform.txt settings are inherited from the referenced core platform, thus there is no need to provide a platform.txt unless there are some specific properties that need to be overridden. The libraries from the referenced platform are used, thus there is no need to provide those libraries. If libraries are provided the list of available libraries are the sum of the 2 libraries where the referencing platform has priority over the referenced platform. In the same way we can use variants and tools defined on another platform: [....] myboard.build.variant=arduino:standard myboard.upload.tool=arduino:avrdude myboard.bootloader.tool=arduino:avrdude [....] Using this syntax allows us to reduce the minimum set of files needed to define a new \"hardware\" to just the boards.txt file. Note that referencing a variant in another platform does not inherit any properties from that platform's platform.txt (like referencing a core does). Platform Terminology \u00b6 Because boards can reference cores, variants and tools in different platforms, this means that a single build or upload can use data from up to four different platforms. To keep this clear, the following terminology is used: The \"board platform\" is the platform that defines the currently selected board (e.g. the platform that contains the board.txt the board is defined in. The \"core platform\" is the the platform that contains the core to be used. The \"variant platform\" is the platform that contains the variant to be used. The \"tool platform\" is the platform that contains the tool used for the current operation. In the most common case, without any references, all of these will refer to the same platform. Note that the above terminology is not in widespread use, but was invented for clarity within this document. In the actual arduino-cli code, the \"board platform\" is called targetPlatform , the \"core platform\" is called actualPlatform , the others are pretty much nameless. boards.local.txt \u00b6 Introduced in Arduino IDE 1.6.6. This file can be used to override properties defined in boards.txt or define new properties without modifying boards.txt. keywords.txt \u00b6 As of Arduino IDE 1.6.6, per-platform keywords can be defined by adding a keywords.txt file to the platform's architecture folder. These keywords are only highlighted when one of the boards of that platform are selected. This file follows the same format as the keywords.txt used in libraries. Each keyword must be separated from the keyword identifier by a tab.","title":"Platform specification"},{"location":"platform-specification/#hardware-folders-structure","text":"The new hardware folders have a hierarchical structure organized in two levels: the first level is the vendor/maintainer the second level is the supported architecture A vendor/maintainer can have multiple supported architectures. For example, below we have three hardware vendors called \"arduino\", \"yyyyy\" and \"xxxxx\": hardware/arduino/avr/... - Arduino - AVR Boards hardware/arduino/sam/... - Arduino - SAM (32bit ARM) Boards hardware/yyyyy/avr/... - Yyy - AVR hardware/xxxxx/avr/... - Xxx - AVR The vendor \"arduino\" has two supported architectures (AVR and SAM), while \"xxxxx\" and \"yyyyy\" have only AVR. If possible, follow existing architecture name conventions when creating hardware packages. The architecture folder name is used to determine library compatibility and also to permit referencing resources from another core of the same architecture so using a non-standard architecture name can only be harmful to your users. Architecture values are case sensitive (e.g. AVR != avr ). Use the vendor folder name to differentiate your package, NOT the architecture name.","title":"Hardware Folders structure"},{"location":"platform-specification/#architecture-configurations","text":"Each architecture must be configured through a set of configuration files: platform.txt contains definitions for the CPU architecture used (compiler, build process parameters, tools used for upload, etc.) boards.txt contains definitions for the boards (board name, parameters for building and uploading sketches, etc.) programmers.txt contains definitions for external programmers (typically used to burn bootloaders or sketches on a blank CPU/board)","title":"Architecture configurations"},{"location":"platform-specification/#configuration-files-format","text":"A configuration file is a list of \"key=value\" properties. The value of a property can be expressed using the value of another property by putting its name inside brackets \"{\" \"}\". For example: compiler.path=/tools/g++_arm_none_eabi/bin/ compiler.c.cmd=arm-none-eabi-gcc [....] recipe.c.o.pattern={compiler.path}{compiler.c.cmd} In this example the property recipe.c.o.pattern will be set to /tools/g++_arm_none_eabi/bin/arm-none-eabi-gcc that is the composition of the two properties compiler.path and compiler.c.cmd .","title":"Configuration files format"},{"location":"platform-specification/#comments","text":"Lines starting with # are treated as comments and will be ignored. # Like in this example # -------------------- # I'm a comment!","title":"Comments"},{"location":"platform-specification/#automatic-property-override-for-specific-os","text":"We can specify an OS-specific value for a property. For example the following file: tools.bossac.cmd=bossac tools.bossac.cmd.windows=bossac.exe will set the property tools.bossac.cmd to the value bossac on Linux and Mac OS and bossac.exe on Windows. Suffixes supported are .linux , .windows and .macosx .","title":"Automatic property override for specific OS"},{"location":"platform-specification/#global-predefined-properties","text":"The Arduino IDE sets the following properties that can be used globally in all configuration files: {runtime.platform.path} : the absolute path of the board platform folder (i.e. the folder containing boards.txt) {runtime.hardware.path} : the absolute path of the hardware folder (i.e. the folder containing the board platform folder) {runtime.ide.path} : the absolute path of the Arduino IDE folder {runtime.ide.version} : the version number of the Arduino IDE as a number (this uses two digits per version number component, and removes the points and leading zeroes, so Arduino IDE 1.8.3 becomes 01.08.03 which becomes runtime.ide.version=10803 ). {ide_version} : Compatibility alias for {runtime.ide.version} {runtime.os} : the running OS (\"linux\", \"windows\", \"macosx\") Compatibility note: Versions before 1.6.0 only used one digit per version number component in {runtime.ide.version} (so 1.5.9 was 159 , not 10509 ).","title":"Global Predefined properties"},{"location":"platform-specification/#platformtxt","text":"The platform.txt file contains information about a platform's specific aspects (compilers command line flags, paths, system libraries, etc.). The following meta-data must be defined: name=Arduino AVR Boards version=1.5.3 The name will be shown in the Boards menu of the Arduino IDE. The version is currently unused, it is reserved for future use (probably together with the Boards Manager to handle dependencies on cores).","title":"platform.txt"},{"location":"platform-specification/#build-process","text":"The platform.txt file is used to configure the build process performed by the Arduino IDE. This is done through a list of recipes . Each recipe is a command line expression that explains how to call the compiler (or other tools) for every build step and which parameter should be passed. The Arduino IDE, before starting the build, determines the list of files to compile. The list is composed of: the user's Sketch source code in the selected board's Core source code in the Libraries used in the sketch The IDE creates a temporary folder to store the build artifacts whose path is available through the global property {build.path} . A property {build.project_name} with the name of the project and a property {build.arch} with the name of the architecture is set as well. {build.path} : The path to the temporary folder to store build artifacts {build.project_name} : The project name {build.arch} : The MCU architecture (avr, sam, etc...) There are some other {build.xxx} properties available, that are explained in the boards.txt section of this guide.","title":"Build process"},{"location":"platform-specification/#recipes-to-compile-source-code","text":"We said that the Arduino IDE determines a list of files to compile. Each file can be source code written in C (.c files), C++ (.cpp files) or Assembly (.S files). Every language is compiled using its respective recipe : recipe.c.o.pattern : for C files recipe.cpp.o.pattern : for CPP files recipe.S.o.pattern : for Assembly files The recipes can be built concatenating other properties set by the IDE (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {object_file} : the path to the output file For example the following is used for AVR: ## Compiler global definitions compiler.path={runtime.ide.path}/tools/avr/bin/ compiler.c.cmd=avr-gcc compiler.c.flags=-c -g -Os -w -ffunction-sections -fdata-sections -MMD [......] ## Compile c files recipe.c.o.pattern=\"{compiler.path}{compiler.c.cmd}\" {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {includes} \"{source_file}\" -o \"{object_file}\" Note that some properties, like {build.mcu} for example, are taken from the boards.txt file which is documented later in this specification.","title":"Recipes to compile source code"},{"location":"platform-specification/#recipes-to-build-the-corea-archive-file","text":"The core of the selected board is compiled as described in the previous paragraph, but the object files obtained from the compile are also archived into a static library named core.a using the recipe.ar.pattern . The recipe can be built concatenating the following properties set by the IDE: {object_file} : the object file to include in the archive {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the resulting archive (ex. \"core.a\") For example, Arduino provides the following for AVR: compiler.ar.cmd=avr-ar compiler.ar.flags=rcs [......] ## Create archives recipe.ar.pattern=\"{compiler.path}{compiler.ar.cmd}\" {compiler.ar.flags} \"{archive_file_path}\" \"{object_file}\"","title":"Recipes to build the core.a archive file"},{"location":"platform-specification/#recipes-for-linking","text":"All the artifacts produced by the previous steps (sketch object files, libraries object files and core.a archive) are linked together using the recipe.c.combine.pattern . The recipe can be built concatenating the following properties set by the IDE: {object_files} : the list of object files to include in the archive (\"file1.o file2.o ....\") {archive_file_path} : fully qualified archive file (ex. \"/path/to/core.a\"). This property was added in Arduino IDE 1.6.6/arduino builder 1.0.0-beta12 as a replacement for {build.path}/{archive_file} . {archive_file} : the name of the core archive file (ex. \"core.a\") For example the following is used for AVR: compiler.c.elf.flags=-Os -Wl,--gc-sections compiler.c.elf.cmd=avr-gcc [......] ## Combine gc-sections, archives, and objects recipe.c.combine.pattern=\"{compiler.path}{compiler.c.elf.cmd}\" {compiler.c.elf.flags} -mmcu={build.mcu} -o \"{build.path}/{build.project_name}.elf\" {object_files} \"{archive_file_path}\" \"-L{build.path}\" -lm","title":"Recipes for linking"},{"location":"platform-specification/#recipes-for-extraction-of-executable-files-and-other-binary-data","text":"An arbitrary number of extra steps can be performed by the IDE at the end of objects linking. These steps can be used to extract binary data used for upload and they are defined by a set of recipes with the following format: recipe.objcopy.FILE_EXTENSION_1.pattern=[.....] recipe.objcopy.FILE_EXTENSION_2.pattern=[.....] [.....] FILE_EXTENSION_x must be replaced with the extension of the extracted file, for example the AVR platform needs two files a .hex and a .eep , so we made two recipes like: recipe.objcopy.eep.pattern=[.....] recipe.objcopy.hex.pattern=[.....] There are no specific properties set by the IDE here. A full example for the AVR platform can be: ## Create eeprom recipe.objcopy.eep.pattern=\"{compiler.path}{compiler.objcopy.cmd}\" {compiler.objcopy.eep.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.eep\" ## Create hex recipe.objcopy.hex.pattern=\"{compiler.path}{compiler.elf2hex.cmd}\" {compiler.elf2hex.flags} \"{build.path}/{build.project_name}.elf\" \"{build.path}/{build.project_name}.hex\"","title":"Recipes for extraction of executable files and other binary data"},{"location":"platform-specification/#recipes-to-compute-binary-sketch-size","text":"At the end of the build the Arduino IDE shows the final binary sketch size to the user. The size is calculated using the recipe recipe.size.pattern . The output of the command executed using the recipe is parsed through the regular expression set in the property recipe.size.regex . The regular expression must match the sketch size. For AVR we have: compiler.size.cmd=avr-size [....] ## Compute size recipe.size.pattern=\"{compiler.path}{compiler.size.cmd}\" -A \"{build.path}/{build.project_name}.hex\" recipe.size.regex=Total\\s+([0-9]+).*","title":"Recipes to compute binary sketch size"},{"location":"platform-specification/#recipes-to-export-compiled-binary","text":"When you do a Sketch > Export compiled Binary , the compiled binary is copied from the build folder to the sketch folder. Two binaries are copied; the standard binary, and a binary that has been merged with the bootloader file (identified by the .with_bootloader in the filename). Two recipes affect how Export compiled Binary works: recipe.output.tmp_file : Defines the binary's filename in the build folder. recipe.output.save_file : Defines the filename to use when copying the binary file to the sketch folder. As with other processes, there are pre and post build hooks for Export compiled Binary . The recipe.hooks.savehex.presavehex.NUMBER.pattern and recipe.hooks.savehex.postsavehex.NUMBER.pattern hooks (but not recipe.output.tmp_file and recipe.output.save_file ) can be built concatenating the following properties set by the IDE: {sketch_path} - the absolute path of the sketch folder","title":"Recipes to export compiled binary"},{"location":"platform-specification/#recipe-to-run-the-preprocessor","text":"For detecting what libraries to include in the build, and for generating function prototypes, the Arduino IDE must be able to run (just) the preprocessor. For this, the recipe.preproc.macros recipe exists. This recipe must run the preprocessor on a given source file, writing the preprocessed output to a given output file, and generate (only) preprocessor errors on standard output. This preprocessor run should happen with the same defines and other preprocessor-influencing-options as for normally compiling the source files. The recipes can be built concatenating other properties set by the IDE (for each file compiled): {includes} : the list of include paths in the format \"-I/include/path -I/another/path....\" {source_file} : the path to the source file {preprocessed_file_path} : the path to the output file For example the following is used for AVR: preproc.macros.flags=-w -x c++ -E -CC recipe.preproc.macros=\"{compiler.path}{compiler.cpp.cmd}\" {compiler.cpp.flags} {preproc.macros.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} \"{source_file}\" -o \"{preprocessed_file_path}\" Note that the {preprocessed_file_path} might point to (your operating system's equivalent) of /dev/null . In this case, also passing -MMD to gcc is problematic, as it will try to generate a dependency file called /dev/null.d , which will usually result in a permission error. Since platforms typically include {compiler.cpp.flags} here, which includes -MMD , the Arduino IDE automatically filters out the -MMD option from the recipe.preproc.macros recipe to prevent this error. Note that older IDE versions used the recipe.preproc.includes recipe to determine includes, which is undocumented here. Since Arduino IDE 1.6.7 (arduino-builder 1.2.0) this was changed and recipe.preproc.includes is no longer used.","title":"Recipe to run the preprocessor"},{"location":"platform-specification/#pre-and-post-build-hooks-since-ide-165","text":"You can specify pre and post actions around each recipe. These are called \"hooks\". Here is the complete list of available hooks: recipe.hooks.sketch.prebuild.NUMBER.pattern (called before sketch compilation) recipe.hooks.sketch.postbuild.NUMBER.pattern (called after sketch compilation) recipe.hooks.libraries.prebuild.NUMBER.pattern (called before libraries compilation) recipe.hooks.libraries.postbuild.NUMBER.pattern (called after libraries compilation) recipe.hooks.core.prebuild.NUMBER.pattern (called before core compilation) recipe.hooks.core.postbuild.NUMBER.pattern (called after core compilation) recipe.hooks.linking.prelink.NUMBER.pattern (called before linking) recipe.hooks.linking.postlink.NUMBER.pattern (called after linking) recipe.hooks.objcopy.preobjcopy.NUMBER.pattern (called before objcopy recipes execution) recipe.hooks.objcopy.postobjcopy.NUMBER.pattern (called after objcopy recipes execution) recipe.hooks.savehex.presavehex.NUMBER.pattern (called before savehex recipe execution) recipe.hooks.savehex.postsavehex.NUMBER.pattern (called after savehex recipe execution) Example: you want to execute 2 commands before sketch compilation and 1 after linking. You'll add to your platform.txt recipe.hooks.sketch.prebuild.1.pattern=echo sketch compilation started at recipe.hooks.sketch.prebuild.2.pattern=date recipe.hooks.linking.postlink.1.pattern=echo linking is complete Warning: hooks recipes are sorted before execution. If you need to write more than 10 recipes for a single hook, pad the number with a zero, for example: recipe.hooks.sketch.prebuild.01.pattern=echo 1 recipe.hooks.sketch.prebuild.02.pattern=echo 2 ... recipe.hooks.sketch.prebuild.11.pattern=echo 11","title":"Pre and post build hooks (since IDE 1.6.5)"},{"location":"platform-specification/#global-platformtxt","text":"Properties defined in a platform.txt created in the hardware subfolder of the IDE installation folder will be used for all platforms and will override local properties.","title":"Global platform.txt"},{"location":"platform-specification/#platformlocaltxt","text":"Introduced in Arduino IDE 1.5.7. This file can be used to override properties defined in platform.txt or define new properties without modifying platform.txt (e.g. when platform.txt is tracked by a version control system). It should be placed in the architecture folder.","title":"platform.local.txt"},{"location":"platform-specification/#boardstxt","text":"This file contains definitions and meta-data for the boards supported. Every board must be referred through its short name, the board ID. The settings for a board are defined through a set of properties with keys having the board ID as prefix. For example the board ID chosen for the Arduino Uno board is \"uno\". An extract of the Uno board configuration in boards.txt looks like: [......] uno.name=Arduino Uno uno.build.mcu=atmega328p uno.build.f_cpu=16000000L uno.build.board=AVR_UNO uno.build.core=arduino uno.build.variant=standard [......] Note that all the relevant keys start with the board ID uno.xxxxx . The uno.name property contains the name of the board shown in the Board menu of the Arduino IDE. The uno.build.board property is used to set a compile-time variable ARDUINO_{build.board} to allow use of conditional code between #ifdef s. The Arduino IDE automatically generates a build.board value if not defined. In this case the variable defined at compile time will be ARDUINO_AVR_UNO . The other properties will override the corresponding global properties of the IDE when the user selects the board. These properties will be globally available, in other configuration files too, without the board ID prefix: uno.build.mcu => build.mcu uno.build.f_cpu => build.f_cpu uno.build.board => build.board uno.build.core => build.core uno.build.variant => build.variant This explains the presence of {build.mcu} or {build.board} in the platform.txt recipes: their value is overwritten respectively by {uno.build.mcu} and {uno.build.board} when the Uno board is selected! Moreover the IDE automatically provides the following properties: {build.core.path} : The path to the selected board's core folder (inside the core platform , for example hardware/arduino/avr/core/arduino) {build.system.path} : The path to the core platform 's system folder if available (for example hardware/arduino/sam/system) {build.variant.path} : The path to the selected board variant folder (inside the variant platform , for example hardware/arduino/avr/variants/micro)","title":"boards.txt"},{"location":"platform-specification/#cores","text":"Cores are placed inside the cores subfolder. Many different cores can be provided within a single platform. For example the following could be a valid platform layout: hardware/arduino/avr/cores/ : Cores folder for \"avr\" architecture, package \"arduino\" hardware/arduino/avr/cores/arduino : the Arduino Core hardware/arduino/avr/cores/rtos : an hypothetical RTOS Core The board's property build.core is used by the Arduino IDE to find the core that must be compiled and linked when the board is selected. For example if a board needs the Arduino core the build.core variable should be set to: uno.build.core=arduino or if the RTOS core is needed, to: uno.build.core=rtos In any case the contents of the selected core folder are compiled and the core folder path is added to the include files search path.","title":"Cores"},{"location":"platform-specification/#core-variants","text":"Sometimes a board needs some tweaking on default core configuration (different pin mapping is a typical example). A core variant folder is an additional folder that is compiled together with the core and allows to easily add specific configurations. Variants must be placed inside the variants folder in the current architecture. For example, Arduino AVR Boards uses: hardware/arduino/avr/cores : Core folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/cores/arduino : The Arduino core hardware/arduino/avr/variants/ : Variant folder for \"avr\" architecture, \"arduino\" package hardware/arduino/avr/variants/standard : ATmega328 based variants hardware/arduino/avr/variants/leonardo : ATmega32U4 based variants In this example, the Arduino Uno board needs the standard variant so the build.variant property is set to standard : [.....] uno.build.core=arduino uno.build.variant=standard [.....] instead, the Arduino Leonardo board needs the leonardo variant: [.....] leonardo.build.core=arduino leonardo.build.variant=leonardo [.....] In the example above, both Uno and Leonardo share the same core but use different variants. In any case, the contents of the selected variant folder path is added to the include search path and its contents are compiled and linked with the sketch. The parameter build.variant.path is automatically found by the IDE.","title":"Core Variants"},{"location":"platform-specification/#tools","text":"The Arduino IDE uses external command line tools to upload the compiled sketch to the board or to burn bootloaders using external programmers. Currently avrdude is used for AVR based boards and bossac for SAM based boards, but there is no limit, any command line executable can be used. The command line parameters are specified using recipes in the same way used for platform build process. Tools are configured inside the platform.txt file. Every Tool is identified by a short name, the Tool ID. A tool can be used for different purposes: upload a sketch to the target board (using a bootloader preinstalled on the board) program a sketch to the target board using an external programmer erase the target board's flash memory using an external programmer burn a bootloader into the target board using an external programmer Each action has its own recipe and its configuration is done through a set of properties having key starting with tools prefix followed by the tool ID and the action: [....] tools.avrdude.upload.pattern=[......] [....] tools.avrdude.program.pattern=[......] [....] tools.avrdude.erase.pattern=[......] [....] tools.avrdude.bootloader.pattern=[......] [.....] A tool may have some actions not defined (it's not mandatory to define all four actions). Let's look at how the upload action is defined for avrdude: tools.avrdude.path={runtime.tools.avrdude.path} tools.avrdude.cmd.path={path}/bin/avrdude tools.avrdude.config.path={path}/etc/avrdude.conf tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" A {runtime.tools.TOOL_NAME.path} and {runtime.tools.TOOL_NAME-TOOL_VERSION.path} property is generated for the tools of Arduino AVR Boards and any other platform installed via Boards Manager. {runtime.tools.TOOL_NAME.path} points to the latest version of the tool available. The Arduino IDE makes the tool configuration properties available globally without the prefix. For example, the tools.avrdude.cmd.path property can be used as {cmd.path} inside the recipe, and the same happens for all the other avrdude configuration variables.","title":"Tools"},{"location":"platform-specification/#verbose-parameter","text":"It is possible for the user to enable verbosity from the Arduino IDE's Preferences panel. This preference is transferred to the command line by the IDE using the ACTION.verbose property (where ACTION is the action we are considering). When the verbose mode is enabled the tools.TOOL_ID.ACTION.params.verbose property is copied into ACTION.verbose . When the verbose mode is disabled, the tools.TOOL_ID.ACTION.params.quiet property is copied into ACTION.verbose . Confused? Maybe an example will clear things: tools.avrdude.upload.params.verbose=-v -v -v -v tools.avrdude.upload.params.quiet=-q -q tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" In this example if the user enables verbose mode, then {upload.params.verbose} is used in {upload.verbose} : tools.avrdude.upload.params.verbose => upload.verbose If the user didn't enable verbose mode, then {upload.params.quiet} is used in {upload.verbose} : tools.avrdude.upload.params.quiet => upload.verbose","title":"Verbose parameter"},{"location":"platform-specification/#sketch-upload-configuration","text":"The Upload action is triggered when the user clicks on the \"Upload\" button on the IDE toolbar. The Arduino IDE selects the tool to be used for upload by looking at the upload.tool property. A specific upload.tool property should be defined for every board in boards.txt: [......] uno.upload.tool=avrdude [......] leonardo.upload.tool=avrdude [......] Also other upload parameters can be defined together, for example in the Arduino AVR Boards boards.txt we have: [.....] uno.name=Arduino Uno uno.upload.tool=avrdude uno.upload.protocol=arduino uno.upload.maximum_size=32256 uno.upload.speed=115200 [.....] leonardo.name=Arduino Leonardo leonardo.upload.tool=avrdude leonardo.upload.protocol=avr109 leonardo.upload.maximum_size=28672 leonardo.upload.speed=57600 leonardo.upload.use_1200bps_touch=true leonardo.upload.wait_for_upload_port=true [.....] Most {upload.XXXX} variables are used later in the avrdude upload recipe in platform.txt: [.....] tools.avrdude.upload.pattern=\"{cmd.path}\" \"-C{config.path}\" {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D \"-Uflash:w:{build.path}/{build.project_name}.hex:i\" [.....]","title":"Sketch upload configuration"},{"location":"platform-specification/#1200-bps-bootloader-reset","text":"Most Arduino boards use a dedicated USB-to-serial chip, that takes care of restarting the main MCU (starting the bootloader) when the serial port is opened. However, boards that have a native USB connection (such as the Leonardo or Zero) will have to disconnect from USB when rebooting into the bootloader (after which the bootloader reconnects to USB and offers a new serial port for uploading). After the upload is complete, the bootloader disconnects from USB again, starts the sketch, which then reconnects to USB. Because of these reconnections, the standard restart-on-serial open will not work, since that would cause the serial port to disappear and be closed again. Instead, the sketch running on these boards interprets a bitrate of 1200 bps as a signal the bootloader should be started. To let the IDE perform these steps, two board parameters can be set: use_1200bps_touch causes the IDE to briefly open the selected serial port at 1200 bps (8N1) before starting the upload. wait_for_upload_port causes the IDE to wait for the serial port to (re)appear before and after the upload. This is only used when use_1200bps_touch is also set. When set, after doing the 1200 bps touch, the IDE will wait for a new serial port to appear and use that as the port for uploads. Alternatively, if the original port does not disappear within a few seconds, the upload continues with the original port (which can be the case if the board was already put into bootloader manually, or the IDE missed the disconnect and reconnect). Additionally, after the upload is complete, the IDE again waits for a new port to appear (or the originally selected port to be present). Note that the IDE implementation of this 1200 bps touch has some peculiarities, and the newer arduino-cli implementation also seems different (does not wait for the port after the reset, which is probably only needed in the IDE to prevent opening the wrong port on the serial monitor, and does not have a shorter timeout when the port never disappears).","title":"1200 bps bootloader reset"},{"location":"platform-specification/#serial-port","text":"The Arduino IDE auto-detects all available serial ports on the running system and lets the user choose one from the GUI. The selected port is available as a configuration property {serial.port} .","title":"Serial port"},{"location":"platform-specification/#upload-using-an-external-programmer","text":"TODO... The platform.txt associated with the selected programmer will be used.","title":"Upload using an external programmer"},{"location":"platform-specification/#burn-bootloader","text":"TODO... The platform.txt associated with the selected board will be used.","title":"Burn Bootloader"},{"location":"platform-specification/#custom-board-menus","text":"The Arduino IDE allows adding extra menu items under the Tools menu. With these sub-menus the user can select different configurations for a specific board (for example a board could be provided in two or more variants with different CPUs, or may have different crystal speed based on the board model, and so on...). Let's see an example of how a custom menu is implemented. The board used in the example is the Arduino Duemilanove. This board was produced in two models, one with an ATmega168 CPU and another with an ATmega328P. We are going then to define a custom menu \"Processor\" that allows the user to choose between the two different microcontrollers. We must first define a set of menu.MENU_ID=Text properties. Text is what is displayed on the GUI for every custom menu we are going to create and must be declared at the beginning of the boards.txt file: menu.cpu=Processor [.....] in this case we declare only one custom menu \"Processor\" which we refer using the \"cpu\" MENU_ID. Now let's add, always in the boards.txt file, the default configuration (common to all processors) for the duemilanove board: menu.cpu=Processor [.....] duemilanove.name=Arduino Duemilanove duemilanove.upload.tool=avrdude duemilanove.upload.protocol=arduino duemilanove.build.f_cpu=16000000L duemilanove.build.board=AVR_DUEMILANOVE duemilanove.build.core=arduino duemilanove.build.variant=standard [.....] Now let's define the options to show in the \"Processor\" menu: [.....] duemilanove.menu.cpu.atmega328=ATmega328P [.....] duemilanove.menu.cpu.atmega168=ATmega168 [.....] We have defined two options: \"ATmega328P\" and \"ATmega168\". Note that the property keys must follow the format BOARD_ID.menu.MENU_ID.OPTION_ID=Text . Finally, the specific configuration for every option: [.....] ## Arduino Duemilanove w/ ATmega328P duemilanove.menu.cpu.atmega328=ATmega328P duemilanove.menu.cpu.atmega328.upload.maximum_size=30720 duemilanove.menu.cpu.atmega328.upload.speed=57600 duemilanove.menu.cpu.atmega328.build.mcu=atmega328p ## Arduino Duemilanove w/ ATmega168 duemilanove.menu.cpu.atmega168=ATmega168 duemilanove.menu.cpu.atmega168.upload.maximum_size=14336 duemilanove.menu.cpu.atmega168.upload.speed=19200 duemilanove.menu.cpu.atmega168.build.mcu=atmega168 [.....] Note that when the user selects an option, all the \"sub properties\" of that option are copied in the global configuration. For example when the user selects \"ATmega168\" from the \"Processor\" menu the Arduino IDE makes the configuration under atmega168 available globally: duemilanove.menu.cpu.atmega168.upload.maximum_size => upload.maximum_size duemilanove.menu.cpu.atmega168.upload.speed => upload.speed duemilanove.menu.cpu.atmega168.build.mcu => build.mcu There is no limit to the number of custom menus that can be defined. TODO: add an example with more than one submenu","title":"Custom board menus"},{"location":"platform-specification/#referencing-another-core-variant-or-tool","text":"Inside the boards.txt we can define a board that uses a core provided by another vendor/mantainer using the syntax VENDOR_ID:CORE_ID . For example, if we want to define a board that uses the \"arduino\" core from the \"arduino\" vendor we should write: [....] myboard.name=My Wonderful Arduino Compatible board myboard.build.core=arduino:arduino [....] Note that we don't need to specify any architecture since the same architecture of \"myboard\" is used, so we just say \"arduino:arduino\" instead of \"arduino:avr:arduino\". The platform.txt settings are inherited from the referenced core platform, thus there is no need to provide a platform.txt unless there are some specific properties that need to be overridden. The libraries from the referenced platform are used, thus there is no need to provide those libraries. If libraries are provided the list of available libraries are the sum of the 2 libraries where the referencing platform has priority over the referenced platform. In the same way we can use variants and tools defined on another platform: [....] myboard.build.variant=arduino:standard myboard.upload.tool=arduino:avrdude myboard.bootloader.tool=arduino:avrdude [....] Using this syntax allows us to reduce the minimum set of files needed to define a new \"hardware\" to just the boards.txt file. Note that referencing a variant in another platform does not inherit any properties from that platform's platform.txt (like referencing a core does).","title":"Referencing another core, variant or tool"},{"location":"platform-specification/#platform-terminology","text":"Because boards can reference cores, variants and tools in different platforms, this means that a single build or upload can use data from up to four different platforms. To keep this clear, the following terminology is used: The \"board platform\" is the platform that defines the currently selected board (e.g. the platform that contains the board.txt the board is defined in. The \"core platform\" is the the platform that contains the core to be used. The \"variant platform\" is the platform that contains the variant to be used. The \"tool platform\" is the platform that contains the tool used for the current operation. In the most common case, without any references, all of these will refer to the same platform. Note that the above terminology is not in widespread use, but was invented for clarity within this document. In the actual arduino-cli code, the \"board platform\" is called targetPlatform , the \"core platform\" is called actualPlatform , the others are pretty much nameless.","title":"Platform Terminology"},{"location":"platform-specification/#boardslocaltxt","text":"Introduced in Arduino IDE 1.6.6. This file can be used to override properties defined in boards.txt or define new properties without modifying boards.txt.","title":"boards.local.txt"},{"location":"platform-specification/#keywordstxt","text":"As of Arduino IDE 1.6.6, per-platform keywords can be defined by adding a keywords.txt file to the platform's architecture folder. These keywords are only highlighted when one of the boards of that platform are selected. This file follows the same format as the keywords.txt used in libraries. Each keyword must be separated from the keyword identifier by a tab.","title":"keywords.txt"},{"location":"sketch-build-process/","text":"The process the Arduino environment uses to build a sketch. More useful information can be found in the Arduino platform specification . Note that the following refers specifically to the build process for AVR targets. Other architectures will have a similar build process. Overview \u00b6 A number of things have to happen for your Arduino code to get onto the Arduino board. First, the Arduino environment performs some minor pre-processing to turn your sketch into a C++ program. Next, dependencies of the sketch are located. It then gets passed to a compiler (avr-gcc), which turns the human readable code into machine readable instructions (or object files). Then your code gets combined with (linked against) the standard Arduino libraries that provide basic functions like digitalWrite() or Serial.print() . The result is a single Intel hex file, which contains the specific bytes that need to be written to the program memory of the chip on the Arduino board. This file is then uploaded to the board: transmitted over the USB or serial connection via the bootloader already on the chip or with external programming hardware. Pre-Processing \u00b6 The Arduino environment performs a few transformations to your sketch before passing it to the avr-gcc compiler: All .ino and .pde files in the sketch folder (shown in the IDE as tabs with no extension) are concatenated together, starting with the file that matches the folder name followed by the others in alphabetical order, and the .cpp extension is added to the filename. If not already present, #include <Arduino.h> is added to the sketch. This header file (found in the core folder for the currently selected board) includes all the definitions needed for the standard Arduino core. Prototypes are generated for all function definitions in .ino/.pde files that don't already have prototypes. In some rare cases prototype generation may fail for some functions. To work around this, you can provide your own prototypes for these functions. #line directives are added to make warning or error messages reflect the original sketch layout. No pre-processing is done to files in a sketch with any extension other than .ino or .pde. Additionally, .h files in the sketch are not automatically #included from the main sketch file. Further, if you want to call functions defined in a .c file from a .cpp file (like one generated from your sketch), you'll need to wrap its declarations in an extern \"C\" {} block that is defined only inside of C++ files. Dependency Resolution \u00b6 The sketch is scanned recursively for dependencies. There are predefined include search paths: Core library folder (as defined by {build.core} ) Variant folder (as defined by {build.variant} ) Standard system directories (e.g., {runtime.tools.avr-gcc.path}/avr/include ) Include search paths added to resolve prior dependencies If the dependency is not present in any of those locations, the installed libraries are then searched (see the Location Priority table below for library locations). For information on the allowed library sub-folder structures see the Arduino library specification . -I options are generated for the path to each library dependency and appended to the includes property , to be used in compilation recipes in platform.txt. If multiple libraries contain a file that matches the #include directive, the priority is determined by applying the following rules, one by one in this order, until a rule determines a winner: A library that is architecture compatible wins against a library that is not architecture compatible (see Architecture Matching ) A library that has better \"folder name priority\" wins (see Folder Name Priority ) A library that is architecture optimized wins against a library that is not architecture optimized (see Architecture Matching ) A library that has a better \"location priority\" wins (see Location Priority ) A library that has a folder name with a better score using the \"closest-match\" algorithm wins A library that has a folder name that comes first in alphanumeric order wins Architecture Matching \u00b6 A library is considered compatible with architecture X if the architectures field in library.properties : explicitly contains the architecture X contains the catch-all * is not specified at all. A library is considered optimized for architecture X only if the architectures field in library.properties explicitly contains the architecture X . This means that a library that is optimized for architecture X is also compatible with it. Examples: architectures field in library.properties Compatible with avr Optimized for avr not specified YES NO architectures=* YES NO architectures=avr YES YES architectures=*,avr YES YES architectures=*,esp8266 YES NO architectures=avr,esp8266 YES YES architectures=samd NO NO Folder Name Priority \u00b6 The \"folder name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Servo.h The folder name matches the include 100% Servo The folder name matches the include 100%, except with a -master suffix Servo-master The folder name has a matching prefix ServoWhatever The folder name has a matching suffix AwesomeServo The folder name contains the include AnAwesomeServoForWhatever Location Priority \u00b6 The \"location priority\" is determined as follows (in order of highest to lowest priority): The library is in the sketchbook ( {sketchbook path}/libraries ) The library is bundled with the board platform/core ( {runtime.platform.path}/libraries ) The library is bundled with the referenced board platform/core The library is bundled with the IDE ( {runtime.ide.path}/libraries ) Compilation \u00b6 Sketches are compiled by avr-gcc and avr-g++ according to the variables in the boards.txt file of the selected board's platform . The sketch is built in a temporary directory in the system-wide temporary directory (e.g. /tmp on Linux). Files taken as source files for the build process are .S, .c and .cpp files (including the .cpp file generated from the sketch's .ino and .pde files during the sketch pre-processing step). Source files of the target are compiled and output with .o extensions to this build directory, as are the main sketch files and any other source files in the sketch and any source files in any libraries which are #include d in the sketch. Before compiling a source file, an attempt is made to reuse the previously compiled .o file, which speeds up the build process. A special .d (dependency) file provides a list of all other files included by the source. The compile step is skipped if the .o and .d files exist and have timestamps newer than the source and all the dependent files. If the source or any dependent file has been modified, or any error occurs verifying the files, the compiler is run normally, writing a new .o & .d file. After a new board is selected from the Tools menu, all source files are rebuilt on the next compile. These .o files are then linked together into a static library and the main sketch file is linked against this library. Only the parts of the library needed for your sketch are included in the final .hex file, reducing the size of most sketches. The .hex file is the final output of the compilation which is then uploaded to the board. If verbose output during compilation is checked in the Preferences dialog, the complete command line of each external command executed as part of the build process will be printed in the editor console. Uploading \u00b6 Sketches are uploaded by avrdude. The upload process is also controlled by variables in the boards and main preferences files. See the Arduino platform specification page for details. If verbose output during upload is checked in the Preferences dialog, debugging information will be output to the editor console, including avrdude command lines and verbose output.","title":"Sketch build process"},{"location":"sketch-build-process/#overview","text":"A number of things have to happen for your Arduino code to get onto the Arduino board. First, the Arduino environment performs some minor pre-processing to turn your sketch into a C++ program. Next, dependencies of the sketch are located. It then gets passed to a compiler (avr-gcc), which turns the human readable code into machine readable instructions (or object files). Then your code gets combined with (linked against) the standard Arduino libraries that provide basic functions like digitalWrite() or Serial.print() . The result is a single Intel hex file, which contains the specific bytes that need to be written to the program memory of the chip on the Arduino board. This file is then uploaded to the board: transmitted over the USB or serial connection via the bootloader already on the chip or with external programming hardware.","title":"Overview"},{"location":"sketch-build-process/#pre-processing","text":"The Arduino environment performs a few transformations to your sketch before passing it to the avr-gcc compiler: All .ino and .pde files in the sketch folder (shown in the IDE as tabs with no extension) are concatenated together, starting with the file that matches the folder name followed by the others in alphabetical order, and the .cpp extension is added to the filename. If not already present, #include <Arduino.h> is added to the sketch. This header file (found in the core folder for the currently selected board) includes all the definitions needed for the standard Arduino core. Prototypes are generated for all function definitions in .ino/.pde files that don't already have prototypes. In some rare cases prototype generation may fail for some functions. To work around this, you can provide your own prototypes for these functions. #line directives are added to make warning or error messages reflect the original sketch layout. No pre-processing is done to files in a sketch with any extension other than .ino or .pde. Additionally, .h files in the sketch are not automatically #included from the main sketch file. Further, if you want to call functions defined in a .c file from a .cpp file (like one generated from your sketch), you'll need to wrap its declarations in an extern \"C\" {} block that is defined only inside of C++ files.","title":"Pre-Processing"},{"location":"sketch-build-process/#dependency-resolution","text":"The sketch is scanned recursively for dependencies. There are predefined include search paths: Core library folder (as defined by {build.core} ) Variant folder (as defined by {build.variant} ) Standard system directories (e.g., {runtime.tools.avr-gcc.path}/avr/include ) Include search paths added to resolve prior dependencies If the dependency is not present in any of those locations, the installed libraries are then searched (see the Location Priority table below for library locations). For information on the allowed library sub-folder structures see the Arduino library specification . -I options are generated for the path to each library dependency and appended to the includes property , to be used in compilation recipes in platform.txt. If multiple libraries contain a file that matches the #include directive, the priority is determined by applying the following rules, one by one in this order, until a rule determines a winner: A library that is architecture compatible wins against a library that is not architecture compatible (see Architecture Matching ) A library that has better \"folder name priority\" wins (see Folder Name Priority ) A library that is architecture optimized wins against a library that is not architecture optimized (see Architecture Matching ) A library that has a better \"location priority\" wins (see Location Priority ) A library that has a folder name with a better score using the \"closest-match\" algorithm wins A library that has a folder name that comes first in alphanumeric order wins","title":"Dependency Resolution"},{"location":"sketch-build-process/#architecture-matching","text":"A library is considered compatible with architecture X if the architectures field in library.properties : explicitly contains the architecture X contains the catch-all * is not specified at all. A library is considered optimized for architecture X only if the architectures field in library.properties explicitly contains the architecture X . This means that a library that is optimized for architecture X is also compatible with it. Examples: architectures field in library.properties Compatible with avr Optimized for avr not specified YES NO architectures=* YES NO architectures=avr YES YES architectures=*,avr YES YES architectures=*,esp8266 YES NO architectures=avr,esp8266 YES YES architectures=samd NO NO","title":"Architecture Matching"},{"location":"sketch-build-process/#folder-name-priority","text":"The \"folder name priority\" is determined as follows (in order of highest to lowest priority): Rule Example for Servo.h The folder name matches the include 100% Servo The folder name matches the include 100%, except with a -master suffix Servo-master The folder name has a matching prefix ServoWhatever The folder name has a matching suffix AwesomeServo The folder name contains the include AnAwesomeServoForWhatever","title":"Folder Name Priority"},{"location":"sketch-build-process/#location-priority","text":"The \"location priority\" is determined as follows (in order of highest to lowest priority): The library is in the sketchbook ( {sketchbook path}/libraries ) The library is bundled with the board platform/core ( {runtime.platform.path}/libraries ) The library is bundled with the referenced board platform/core The library is bundled with the IDE ( {runtime.ide.path}/libraries )","title":"Location Priority"},{"location":"sketch-build-process/#compilation","text":"Sketches are compiled by avr-gcc and avr-g++ according to the variables in the boards.txt file of the selected board's platform . The sketch is built in a temporary directory in the system-wide temporary directory (e.g. /tmp on Linux). Files taken as source files for the build process are .S, .c and .cpp files (including the .cpp file generated from the sketch's .ino and .pde files during the sketch pre-processing step). Source files of the target are compiled and output with .o extensions to this build directory, as are the main sketch files and any other source files in the sketch and any source files in any libraries which are #include d in the sketch. Before compiling a source file, an attempt is made to reuse the previously compiled .o file, which speeds up the build process. A special .d (dependency) file provides a list of all other files included by the source. The compile step is skipped if the .o and .d files exist and have timestamps newer than the source and all the dependent files. If the source or any dependent file has been modified, or any error occurs verifying the files, the compiler is run normally, writing a new .o & .d file. After a new board is selected from the Tools menu, all source files are rebuilt on the next compile. These .o files are then linked together into a static library and the main sketch file is linked against this library. Only the parts of the library needed for your sketch are included in the final .hex file, reducing the size of most sketches. The .hex file is the final output of the compilation which is then uploaded to the board. If verbose output during compilation is checked in the Preferences dialog, the complete command line of each external command executed as part of the build process will be printed in the editor console.","title":"Compilation"},{"location":"sketch-build-process/#uploading","text":"Sketches are uploaded by avrdude. The upload process is also controlled by variables in the boards and main preferences files. See the Arduino platform specification page for details. If verbose output during upload is checked in the Preferences dialog, debugging information will be output to the editor console, including avrdude command lines and verbose output.","title":"Uploading"},{"location":"commands/arduino-cli/","text":"arduino-cli \u00b6 Arduino CLI. Synopsis \u00b6 Arduino Command Line Interface (arduino-cli). Examples \u00b6 arduino-cli <command> [flags...] Options \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") -h, --help help for arduino-cli --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands. arduino-cli cache - Arduino cache commands. arduino-cli compile - Compiles Arduino sketches. arduino-cli config - Arduino Configuration Commands. arduino-cli core - Arduino Core operations. arduino-cli daemon - Run as a daemon on port arduino-cli debug - Debug Arduino sketches. arduino-cli lib - Arduino commands about libraries. arduino-cli sketch - Arduino CLI Sketch Commands. arduino-cli upload - Upload Arduino sketches. arduino-cli version - Shows version number of arduino CLI. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"Arduino cli"},{"location":"commands/arduino-cli/#arduino-cli","text":"Arduino CLI.","title":"arduino-cli"},{"location":"commands/arduino-cli/#synopsis","text":"Arduino Command Line Interface (arduino-cli).","title":"Synopsis"},{"location":"commands/arduino-cli/#examples","text":"arduino-cli <command> [flags...]","title":"Examples"},{"location":"commands/arduino-cli/#options","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") -h, --help help for arduino-cli --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options"},{"location":"commands/arduino-cli/#see-also","text":"arduino-cli board - Arduino board commands. arduino-cli cache - Arduino cache commands. arduino-cli compile - Compiles Arduino sketches. arduino-cli config - Arduino Configuration Commands. arduino-cli core - Arduino Core operations. arduino-cli daemon - Run as a daemon on port arduino-cli debug - Debug Arduino sketches. arduino-cli lib - Arduino commands about libraries. arduino-cli sketch - Arduino CLI Sketch Commands. arduino-cli upload - Upload Arduino sketches. arduino-cli version - Shows version number of arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_board/","text":"arduino-cli board \u00b6 Arduino board commands. Synopsis \u00b6 Arduino board commands. Examples \u00b6 # Lists all connected boards. arduino-cli board list # Attaches a sketch to a board. arduino-cli board attach serial:///dev/tty/ACM0 mySketch Options \u00b6 -h, --help help for board Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli board attach - Attaches a sketch to a board. arduino-cli board details - Print details about a board. arduino-cli board list - List connected boards. arduino-cli board listall - List all known boards and their corresponding FQBN. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"board"},{"location":"commands/arduino-cli_board/#arduino-cli-board","text":"Arduino board commands.","title":"arduino-cli board"},{"location":"commands/arduino-cli_board/#synopsis","text":"Arduino board commands.","title":"Synopsis"},{"location":"commands/arduino-cli_board/#examples","text":"# Lists all connected boards. arduino-cli board list # Attaches a sketch to a board. arduino-cli board attach serial:///dev/tty/ACM0 mySketch","title":"Examples"},{"location":"commands/arduino-cli_board/#options","text":"-h, --help help for board","title":"Options"},{"location":"commands/arduino-cli_board/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli board attach - Attaches a sketch to a board. arduino-cli board details - Print details about a board. arduino-cli board list - List connected boards. arduino-cli board listall - List all known boards and their corresponding FQBN.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_board_attach/","text":"arduino-cli board attach \u00b6 Attaches a sketch to a board. Synopsis \u00b6 Attaches a sketch to a board. arduino-cli board attach <port>|<FQBN> [sketchPath] [flags] Examples \u00b6 arduino-cli board attach serial:///dev/tty/ACM0 arduino-cli board attach serial:///dev/tty/ACM0 HelloWorld arduino-cli board attach arduino:samd:mkr1000 Options \u00b6 -h, --help help for attach --timeout string The timeout of the search of connected devices, try to high it if your board is not found (e.g. to 10s). (default \"5s\") Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"board attach"},{"location":"commands/arduino-cli_board_attach/#arduino-cli-board-attach","text":"Attaches a sketch to a board.","title":"arduino-cli board attach"},{"location":"commands/arduino-cli_board_attach/#synopsis","text":"Attaches a sketch to a board. arduino-cli board attach <port>|<FQBN> [sketchPath] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_attach/#examples","text":"arduino-cli board attach serial:///dev/tty/ACM0 arduino-cli board attach serial:///dev/tty/ACM0 HelloWorld arduino-cli board attach arduino:samd:mkr1000","title":"Examples"},{"location":"commands/arduino-cli_board_attach/#options","text":"-h, --help help for attach --timeout string The timeout of the search of connected devices, try to high it if your board is not found (e.g. to 10s). (default \"5s\")","title":"Options"},{"location":"commands/arduino-cli_board_attach/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_attach/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_attach/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_board_details/","text":"arduino-cli board details \u00b6 Print details about a board. Synopsis \u00b6 Show information about a board, in particular if the board has options to be specified in the FQBN. arduino-cli board details <FQBN> [flags] Examples \u00b6 arduino-cli board details arduino:avr:nano Options \u00b6 -h, --help help for details Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"board details"},{"location":"commands/arduino-cli_board_details/#arduino-cli-board-details","text":"Print details about a board.","title":"arduino-cli board details"},{"location":"commands/arduino-cli_board_details/#synopsis","text":"Show information about a board, in particular if the board has options to be specified in the FQBN. arduino-cli board details <FQBN> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_details/#examples","text":"arduino-cli board details arduino:avr:nano","title":"Examples"},{"location":"commands/arduino-cli_board_details/#options","text":"-h, --help help for details","title":"Options"},{"location":"commands/arduino-cli_board_details/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_details/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_details/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_board_list/","text":"arduino-cli board list \u00b6 List connected boards. Synopsis \u00b6 Detects and displays a list of connected boards to the current computer. arduino-cli board list [flags] Examples \u00b6 arduino-cli board list --timeout 10s Options \u00b6 -h, --help help for list --timeout string The timeout of the search of connected devices, try to increase it if your board is not found (e.g. to 10s). (default \"0s\") Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"board list"},{"location":"commands/arduino-cli_board_list/#arduino-cli-board-list","text":"List connected boards.","title":"arduino-cli board list"},{"location":"commands/arduino-cli_board_list/#synopsis","text":"Detects and displays a list of connected boards to the current computer. arduino-cli board list [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_list/#examples","text":"arduino-cli board list --timeout 10s","title":"Examples"},{"location":"commands/arduino-cli_board_list/#options","text":"-h, --help help for list --timeout string The timeout of the search of connected devices, try to increase it if your board is not found (e.g. to 10s). (default \"0s\")","title":"Options"},{"location":"commands/arduino-cli_board_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_list/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_list/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_board_listall/","text":"arduino-cli board listall \u00b6 List all known boards and their corresponding FQBN. Synopsis \u00b6 List all boards that have the support platform installed. You can search for a specific board if you specify the board name arduino-cli board listall [boardname] [flags] Examples \u00b6 arduino-cli board listall arduino-cli board listall zero Options \u00b6 -h, --help help for listall Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli board - Arduino board commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"board listall"},{"location":"commands/arduino-cli_board_listall/#arduino-cli-board-listall","text":"List all known boards and their corresponding FQBN.","title":"arduino-cli board listall"},{"location":"commands/arduino-cli_board_listall/#synopsis","text":"List all boards that have the support platform installed. You can search for a specific board if you specify the board name arduino-cli board listall [boardname] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_board_listall/#examples","text":"arduino-cli board listall arduino-cli board listall zero","title":"Examples"},{"location":"commands/arduino-cli_board_listall/#options","text":"-h, --help help for listall","title":"Options"},{"location":"commands/arduino-cli_board_listall/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_board_listall/#see-also","text":"arduino-cli board - Arduino board commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_board_listall/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_cache/","text":"arduino-cli cache \u00b6 Arduino cache commands. Synopsis \u00b6 Arduino cache commands. Examples \u00b6 # Clean caches. arduino-cli cache clean Options \u00b6 -h, --help help for cache Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli cache clean - Clean arduino cache. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"cache"},{"location":"commands/arduino-cli_cache/#arduino-cli-cache","text":"Arduino cache commands.","title":"arduino-cli cache"},{"location":"commands/arduino-cli_cache/#synopsis","text":"Arduino cache commands.","title":"Synopsis"},{"location":"commands/arduino-cli_cache/#examples","text":"# Clean caches. arduino-cli cache clean","title":"Examples"},{"location":"commands/arduino-cli_cache/#options","text":"-h, --help help for cache","title":"Options"},{"location":"commands/arduino-cli_cache/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_cache/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli cache clean - Clean arduino cache.","title":"SEE ALSO"},{"location":"commands/arduino-cli_cache/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_cache_clean/","text":"arduino-cli cache clean \u00b6 Clean arduino cache. Synopsis \u00b6 Clean the files i.e. ~/arduino15/staging in Linux. arduino-cli cache clean [flags] Examples \u00b6 arduino-cli cache clean Options \u00b6 -h, --help help for clean Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli cache - Arduino cache commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"cache clean"},{"location":"commands/arduino-cli_cache_clean/#arduino-cli-cache-clean","text":"Clean arduino cache.","title":"arduino-cli cache clean"},{"location":"commands/arduino-cli_cache_clean/#synopsis","text":"Clean the files i.e. ~/arduino15/staging in Linux. arduino-cli cache clean [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_cache_clean/#examples","text":"arduino-cli cache clean","title":"Examples"},{"location":"commands/arduino-cli_cache_clean/#options","text":"-h, --help help for clean","title":"Options"},{"location":"commands/arduino-cli_cache_clean/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_cache_clean/#see-also","text":"arduino-cli cache - Arduino cache commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_cache_clean/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_compile/","text":"arduino-cli compile \u00b6 Compiles Arduino sketches. Synopsis \u00b6 Compiles Arduino sketches. arduino-cli compile [flags] Examples \u00b6 arduino-cli compile -b arduino:avr:uno /home/user/Arduino/MySketch Options \u00b6 --build-cache-path string Builds of 'core.a' are saved into this path to be cached and reused. --build-path string Path where to save compiled files. If omitted, a directory will be created in the default temporary path of your OS. --build-properties strings List of custom build properties separated by commas. Or can be used multiple times for multiple properties. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for compile --libraries strings List of custom libraries paths separated by commas. Or can be used multiple times for multiple libraries paths. --optimize-for-debug Optional, optimize compile output for debug, not for release. -o, --output string Filename of the compile output. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 --preprocess Print preprocessed code to stdout instead of compiling. --quiet Optional, supresses almost every output. --show-properties Show all build properties used instead of compiling. -u, --upload Upload the binary after the compilation. -t, --verify Verify uploaded binary after the upload. --vid-pid string When specified, VID/PID specific build properties are used, if boards supports them. --warnings string Optional, can be \"none\", \"default\", \"more\" and \"all\". Defaults to \"none\". Used to tell gcc which warning level to use (-W flag). (default \"none\") Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"compile"},{"location":"commands/arduino-cli_compile/#arduino-cli-compile","text":"Compiles Arduino sketches.","title":"arduino-cli compile"},{"location":"commands/arduino-cli_compile/#synopsis","text":"Compiles Arduino sketches. arduino-cli compile [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_compile/#examples","text":"arduino-cli compile -b arduino:avr:uno /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_compile/#options","text":"--build-cache-path string Builds of 'core.a' are saved into this path to be cached and reused. --build-path string Path where to save compiled files. If omitted, a directory will be created in the default temporary path of your OS. --build-properties strings List of custom build properties separated by commas. Or can be used multiple times for multiple properties. -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for compile --libraries strings List of custom libraries paths separated by commas. Or can be used multiple times for multiple libraries paths. --optimize-for-debug Optional, optimize compile output for debug, not for release. -o, --output string Filename of the compile output. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 --preprocess Print preprocessed code to stdout instead of compiling. --quiet Optional, supresses almost every output. --show-properties Show all build properties used instead of compiling. -u, --upload Upload the binary after the compilation. -t, --verify Verify uploaded binary after the upload. --vid-pid string When specified, VID/PID specific build properties are used, if boards supports them. --warnings string Optional, can be \"none\", \"default\", \"more\" and \"all\". Defaults to \"none\". Used to tell gcc which warning level to use (-W flag). (default \"none\")","title":"Options"},{"location":"commands/arduino-cli_compile/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_compile/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_compile/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_config/","text":"arduino-cli config \u00b6 Arduino Configuration Commands. Synopsis \u00b6 Arduino Configuration Commands. Examples \u00b6 arduino-cli config init Options \u00b6 -h, --help help for config Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli config dump - Prints the current configuration arduino-cli config init - Initializes a new configuration file into the default location. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"config"},{"location":"commands/arduino-cli_config/#arduino-cli-config","text":"Arduino Configuration Commands.","title":"arduino-cli config"},{"location":"commands/arduino-cli_config/#synopsis","text":"Arduino Configuration Commands.","title":"Synopsis"},{"location":"commands/arduino-cli_config/#examples","text":"arduino-cli config init","title":"Examples"},{"location":"commands/arduino-cli_config/#options","text":"-h, --help help for config","title":"Options"},{"location":"commands/arduino-cli_config/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli config dump - Prints the current configuration arduino-cli config init - Initializes a new configuration file into the default location.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_config_dump/","text":"arduino-cli config dump \u00b6 Prints the current configuration Synopsis \u00b6 Prints the current configuration. arduino-cli config dump [flags] Examples \u00b6 arduino-cli config dump Options \u00b6 -h, --help help for dump Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli config - Arduino Configuration Commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"config dump"},{"location":"commands/arduino-cli_config_dump/#arduino-cli-config-dump","text":"Prints the current configuration","title":"arduino-cli config dump"},{"location":"commands/arduino-cli_config_dump/#synopsis","text":"Prints the current configuration. arduino-cli config dump [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_dump/#examples","text":"arduino-cli config dump","title":"Examples"},{"location":"commands/arduino-cli_config_dump/#options","text":"-h, --help help for dump","title":"Options"},{"location":"commands/arduino-cli_config_dump/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_dump/#see-also","text":"arduino-cli config - Arduino Configuration Commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_dump/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_config_init/","text":"arduino-cli config init \u00b6 Initializes a new configuration file into the default location. Synopsis \u00b6 Initializes a new configuration file into the default location ($EXE_DIR/cli-config.yml). arduino-cli config init [flags] Examples \u00b6 # Creates a default configuration file into the default location. arduino-cli config init Options \u00b6 --dest-dir string Sets where to save the configuration file. -h, --help help for init Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli config - Arduino Configuration Commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"config init"},{"location":"commands/arduino-cli_config_init/#arduino-cli-config-init","text":"Initializes a new configuration file into the default location.","title":"arduino-cli config init"},{"location":"commands/arduino-cli_config_init/#synopsis","text":"Initializes a new configuration file into the default location ($EXE_DIR/cli-config.yml). arduino-cli config init [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_config_init/#examples","text":"# Creates a default configuration file into the default location. arduino-cli config init","title":"Examples"},{"location":"commands/arduino-cli_config_init/#options","text":"--dest-dir string Sets where to save the configuration file. -h, --help help for init","title":"Options"},{"location":"commands/arduino-cli_config_init/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_config_init/#see-also","text":"arduino-cli config - Arduino Configuration Commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_config_init/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core/","text":"arduino-cli core \u00b6 Arduino Core operations. Synopsis \u00b6 Arduino Core operations. Examples \u00b6 arduino-cli core update-index Options \u00b6 -h, --help help for core Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli core download - Downloads one or more cores and corresponding tool dependencies. arduino-cli core install - Installs one or more cores and corresponding tool dependencies. arduino-cli core list - Shows the list of installed platforms. arduino-cli core search - Search for a core in the package index. arduino-cli core uninstall - Uninstalls one or more cores and corresponding tool dependencies if no more used. arduino-cli core update-index - Updates the index of cores. arduino-cli core upgrade - Upgrades one or all installed platforms to the latest version. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core"},{"location":"commands/arduino-cli_core/#arduino-cli-core","text":"Arduino Core operations.","title":"arduino-cli core"},{"location":"commands/arduino-cli_core/#synopsis","text":"Arduino Core operations.","title":"Synopsis"},{"location":"commands/arduino-cli_core/#examples","text":"arduino-cli core update-index","title":"Examples"},{"location":"commands/arduino-cli_core/#options","text":"-h, --help help for core","title":"Options"},{"location":"commands/arduino-cli_core/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli core download - Downloads one or more cores and corresponding tool dependencies. arduino-cli core install - Installs one or more cores and corresponding tool dependencies. arduino-cli core list - Shows the list of installed platforms. arduino-cli core search - Search for a core in the package index. arduino-cli core uninstall - Uninstalls one or more cores and corresponding tool dependencies if no more used. arduino-cli core update-index - Updates the index of cores. arduino-cli core upgrade - Upgrades one or all installed platforms to the latest version.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core_download/","text":"arduino-cli core download \u00b6 Downloads one or more cores and corresponding tool dependencies. Synopsis \u00b6 Downloads one or more cores and corresponding tool dependencies. arduino-cli core download [PACKAGER:ARCH[=VERSION]](S) [flags] Examples \u00b6 arduino-cli core download arduino:samd # to download the latest version of arduino SAMD core. arduino-cli core download arduino:samd=1.6.9 # for a specific version (in this case 1.6.9). Options \u00b6 -h, --help help for download Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino Core operations. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core download"},{"location":"commands/arduino-cli_core_download/#arduino-cli-core-download","text":"Downloads one or more cores and corresponding tool dependencies.","title":"arduino-cli core download"},{"location":"commands/arduino-cli_core_download/#synopsis","text":"Downloads one or more cores and corresponding tool dependencies. arduino-cli core download [PACKAGER:ARCH[=VERSION]](S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_download/#examples","text":"arduino-cli core download arduino:samd # to download the latest version of arduino SAMD core. arduino-cli core download arduino:samd=1.6.9 # for a specific version (in this case 1.6.9).","title":"Examples"},{"location":"commands/arduino-cli_core_download/#options","text":"-h, --help help for download","title":"Options"},{"location":"commands/arduino-cli_core_download/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_download/#see-also","text":"arduino-cli core - Arduino Core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_download/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core_install/","text":"arduino-cli core install \u00b6 Installs one or more cores and corresponding tool dependencies. Synopsis \u00b6 Installs one or more cores and corresponding tool dependencies. arduino-cli core install PACKAGER:ARCH[@VERSION] ... [flags] Examples \u00b6 # download the latest version of arduino SAMD core. arduino-cli core install arduino:samd # download a specific version (in this case 1.6.9). arduino-cli core install arduino:samd@1.6.9 Options \u00b6 -h, --help help for install Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino Core operations. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core install"},{"location":"commands/arduino-cli_core_install/#arduino-cli-core-install","text":"Installs one or more cores and corresponding tool dependencies.","title":"arduino-cli core install"},{"location":"commands/arduino-cli_core_install/#synopsis","text":"Installs one or more cores and corresponding tool dependencies. arduino-cli core install PACKAGER:ARCH[@VERSION] ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_install/#examples","text":"# download the latest version of arduino SAMD core. arduino-cli core install arduino:samd # download a specific version (in this case 1.6.9). arduino-cli core install arduino:samd@1.6.9","title":"Examples"},{"location":"commands/arduino-cli_core_install/#options","text":"-h, --help help for install","title":"Options"},{"location":"commands/arduino-cli_core_install/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_install/#see-also","text":"arduino-cli core - Arduino Core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_install/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core_list/","text":"arduino-cli core list \u00b6 Shows the list of installed platforms. Synopsis \u00b6 Shows the list of installed platforms. arduino-cli core list [flags] Examples \u00b6 arduino-cli core list Options \u00b6 -h, --help help for list --updatable List updatable platforms. Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino Core operations. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core list"},{"location":"commands/arduino-cli_core_list/#arduino-cli-core-list","text":"Shows the list of installed platforms.","title":"arduino-cli core list"},{"location":"commands/arduino-cli_core_list/#synopsis","text":"Shows the list of installed platforms. arduino-cli core list [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_list/#examples","text":"arduino-cli core list","title":"Examples"},{"location":"commands/arduino-cli_core_list/#options","text":"-h, --help help for list --updatable List updatable platforms.","title":"Options"},{"location":"commands/arduino-cli_core_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_list/#see-also","text":"arduino-cli core - Arduino Core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_list/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core_search/","text":"arduino-cli core search \u00b6 Search for a core in the package index. Synopsis \u00b6 Search for a core in the package index using the specified keywords. arduino-cli core search <keywords...> [flags] Examples \u00b6 arduino-cli core search MKRZero -a -v Options \u00b6 -a, --all Show all available core versions. -h, --help help for search Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino Core operations. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core search"},{"location":"commands/arduino-cli_core_search/#arduino-cli-core-search","text":"Search for a core in the package index.","title":"arduino-cli core search"},{"location":"commands/arduino-cli_core_search/#synopsis","text":"Search for a core in the package index using the specified keywords. arduino-cli core search <keywords...> [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_search/#examples","text":"arduino-cli core search MKRZero -a -v","title":"Examples"},{"location":"commands/arduino-cli_core_search/#options","text":"-a, --all Show all available core versions. -h, --help help for search","title":"Options"},{"location":"commands/arduino-cli_core_search/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_search/#see-also","text":"arduino-cli core - Arduino Core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_search/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core_uninstall/","text":"arduino-cli core uninstall \u00b6 Uninstalls one or more cores and corresponding tool dependencies if no more used. Synopsis \u00b6 Uninstalls one or more cores and corresponding tool dependencies if no more used. arduino-cli core uninstall PACKAGER:ARCH ... [flags] Examples \u00b6 arduino-cli core uninstall arduino:samd Options \u00b6 -h, --help help for uninstall Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino Core operations. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core uninstall"},{"location":"commands/arduino-cli_core_uninstall/#arduino-cli-core-uninstall","text":"Uninstalls one or more cores and corresponding tool dependencies if no more used.","title":"arduino-cli core uninstall"},{"location":"commands/arduino-cli_core_uninstall/#synopsis","text":"Uninstalls one or more cores and corresponding tool dependencies if no more used. arduino-cli core uninstall PACKAGER:ARCH ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_uninstall/#examples","text":"arduino-cli core uninstall arduino:samd","title":"Examples"},{"location":"commands/arduino-cli_core_uninstall/#options","text":"-h, --help help for uninstall","title":"Options"},{"location":"commands/arduino-cli_core_uninstall/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_uninstall/#see-also","text":"arduino-cli core - Arduino Core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_uninstall/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core_update-index/","text":"arduino-cli core update-index \u00b6 Updates the index of cores. Synopsis \u00b6 Updates the index of cores to the latest version. arduino-cli core update-index [flags] Examples \u00b6 arduino-cli core update-index Options \u00b6 -h, --help help for update-index Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino Core operations. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core update index"},{"location":"commands/arduino-cli_core_update-index/#arduino-cli-core-update-index","text":"Updates the index of cores.","title":"arduino-cli core update-index"},{"location":"commands/arduino-cli_core_update-index/#synopsis","text":"Updates the index of cores to the latest version. arduino-cli core update-index [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_update-index/#examples","text":"arduino-cli core update-index","title":"Examples"},{"location":"commands/arduino-cli_core_update-index/#options","text":"-h, --help help for update-index","title":"Options"},{"location":"commands/arduino-cli_core_update-index/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_update-index/#see-also","text":"arduino-cli core - Arduino Core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_update-index/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_core_upgrade/","text":"arduino-cli core upgrade \u00b6 Upgrades one or all installed platforms to the latest version. Synopsis \u00b6 Upgrades one or all installed platforms to the latest version. arduino-cli core upgrade [PACKAGER:ARCH] ... [flags] Examples \u00b6 # upgrade everything to the latest version arduino-cli core upgrade # upgrade arduino:samd to the latest version arduino-cli core upgrade arduino:samd Options \u00b6 -h, --help help for upgrade Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli core - Arduino Core operations. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"core upgrade"},{"location":"commands/arduino-cli_core_upgrade/#arduino-cli-core-upgrade","text":"Upgrades one or all installed platforms to the latest version.","title":"arduino-cli core upgrade"},{"location":"commands/arduino-cli_core_upgrade/#synopsis","text":"Upgrades one or all installed platforms to the latest version. arduino-cli core upgrade [PACKAGER:ARCH] ... [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_core_upgrade/#examples","text":"# upgrade everything to the latest version arduino-cli core upgrade # upgrade arduino:samd to the latest version arduino-cli core upgrade arduino:samd","title":"Examples"},{"location":"commands/arduino-cli_core_upgrade/#options","text":"-h, --help help for upgrade","title":"Options"},{"location":"commands/arduino-cli_core_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_core_upgrade/#see-also","text":"arduino-cli core - Arduino Core operations.","title":"SEE ALSO"},{"location":"commands/arduino-cli_core_upgrade/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_daemon/","text":"arduino-cli daemon \u00b6 Run as a daemon on port Synopsis \u00b6 Running as a daemon the initialization of cores and libraries is done only once. arduino-cli daemon [flags] Examples \u00b6 arduino-cli daemon Options \u00b6 --daemonize Do not terminate daemon process if the parent process dies -h, --help help for daemon --port string The TCP port the daemon will listen to Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"daemon"},{"location":"commands/arduino-cli_daemon/#arduino-cli-daemon","text":"Run as a daemon on port","title":"arduino-cli daemon"},{"location":"commands/arduino-cli_daemon/#synopsis","text":"Running as a daemon the initialization of cores and libraries is done only once. arduino-cli daemon [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_daemon/#examples","text":"arduino-cli daemon","title":"Examples"},{"location":"commands/arduino-cli_daemon/#options","text":"--daemonize Do not terminate daemon process if the parent process dies -h, --help help for daemon --port string The TCP port the daemon will listen to","title":"Options"},{"location":"commands/arduino-cli_daemon/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_daemon/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_daemon/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_debug/","text":"arduino-cli debug \u00b6 Debug Arduino sketches. Synopsis \u00b6 Debug Arduino sketches. (this command opens an interactive gdb session) arduino-cli debug [flags] Examples \u00b6 arduino-cli debug -b arduino:samd:mkr1000 /home/user/Arduino/MySketch Options \u00b6 -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for debug -i, --input string Input file to be uploaded for debug. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"debug"},{"location":"commands/arduino-cli_debug/#arduino-cli-debug","text":"Debug Arduino sketches.","title":"arduino-cli debug"},{"location":"commands/arduino-cli_debug/#synopsis","text":"Debug Arduino sketches. (this command opens an interactive gdb session) arduino-cli debug [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_debug/#examples","text":"arduino-cli debug -b arduino:samd:mkr1000 /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_debug/#options","text":"-b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for debug -i, --input string Input file to be uploaded for debug. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0","title":"Options"},{"location":"commands/arduino-cli_debug/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_debug/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_debug/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib/","text":"arduino-cli lib \u00b6 Arduino commands about libraries. Synopsis \u00b6 Arduino commands about libraries. Examples \u00b6 arduino-cli lib install AudioZero arduino-cli lib update-index Options \u00b6 -h, --help help for lib Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli lib deps - Check dependencies status for the specified library. arduino-cli lib download - Downloads one or more libraries without installing them. arduino-cli lib install - Installs one of more specified libraries into the system. arduino-cli lib list - Shows a list of all installed libraries. arduino-cli lib search - Searches for one or more libraries data. arduino-cli lib uninstall - Uninstalls one or more libraries. arduino-cli lib update-index - Updates the libraries index. arduino-cli lib upgrade - Upgrades installed libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib"},{"location":"commands/arduino-cli_lib/#arduino-cli-lib","text":"Arduino commands about libraries.","title":"arduino-cli lib"},{"location":"commands/arduino-cli_lib/#synopsis","text":"Arduino commands about libraries.","title":"Synopsis"},{"location":"commands/arduino-cli_lib/#examples","text":"arduino-cli lib install AudioZero arduino-cli lib update-index","title":"Examples"},{"location":"commands/arduino-cli_lib/#options","text":"-h, --help help for lib","title":"Options"},{"location":"commands/arduino-cli_lib/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli lib deps - Check dependencies status for the specified library. arduino-cli lib download - Downloads one or more libraries without installing them. arduino-cli lib install - Installs one of more specified libraries into the system. arduino-cli lib list - Shows a list of all installed libraries. arduino-cli lib search - Searches for one or more libraries data. arduino-cli lib uninstall - Uninstalls one or more libraries. arduino-cli lib update-index - Updates the libraries index. arduino-cli lib upgrade - Upgrades installed libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_deps/","text":"arduino-cli lib deps \u00b6 Check dependencies status for the specified library. Synopsis \u00b6 Check dependencies status for the specified library. arduino-cli lib deps LIBRARY[@VERSION_NUMBER](S) [flags] Examples \u00b6 arduino-cli lib deps AudioZero # for the latest version. arduino-cli lib deps AudioZero@1.0.0 # for the specific version. Options \u00b6 -h, --help help for deps Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib deps"},{"location":"commands/arduino-cli_lib_deps/#arduino-cli-lib-deps","text":"Check dependencies status for the specified library.","title":"arduino-cli lib deps"},{"location":"commands/arduino-cli_lib_deps/#synopsis","text":"Check dependencies status for the specified library. arduino-cli lib deps LIBRARY[@VERSION_NUMBER](S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_deps/#examples","text":"arduino-cli lib deps AudioZero # for the latest version. arduino-cli lib deps AudioZero@1.0.0 # for the specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_deps/#options","text":"-h, --help help for deps","title":"Options"},{"location":"commands/arduino-cli_lib_deps/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_deps/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_deps/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_download/","text":"arduino-cli lib download \u00b6 Downloads one or more libraries without installing them. Synopsis \u00b6 Downloads one or more libraries without installing them. arduino-cli lib download [LIBRARY_NAME(S)] [flags] Examples \u00b6 arduino-cli lib download AudioZero # for the latest version. arduino-cli lib download AudioZero@1.0.0 # for a specific version. Options \u00b6 -h, --help help for download Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib download"},{"location":"commands/arduino-cli_lib_download/#arduino-cli-lib-download","text":"Downloads one or more libraries without installing them.","title":"arduino-cli lib download"},{"location":"commands/arduino-cli_lib_download/#synopsis","text":"Downloads one or more libraries without installing them. arduino-cli lib download [LIBRARY_NAME(S)] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_download/#examples","text":"arduino-cli lib download AudioZero # for the latest version. arduino-cli lib download AudioZero@1.0.0 # for a specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_download/#options","text":"-h, --help help for download","title":"Options"},{"location":"commands/arduino-cli_lib_download/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_download/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_download/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_install/","text":"arduino-cli lib install \u00b6 Installs one of more specified libraries into the system. Synopsis \u00b6 Installs one or more specified libraries into the system. arduino-cli lib install LIBRARY[@VERSION_NUMBER](S) [flags] Examples \u00b6 arduino-cli lib install AudioZero # for the latest version. arduino-cli lib install AudioZero@1.0.0 # for the specific version. Options \u00b6 -h, --help help for install --no-deps Do not install dependencies. Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib install"},{"location":"commands/arduino-cli_lib_install/#arduino-cli-lib-install","text":"Installs one of more specified libraries into the system.","title":"arduino-cli lib install"},{"location":"commands/arduino-cli_lib_install/#synopsis","text":"Installs one or more specified libraries into the system. arduino-cli lib install LIBRARY[@VERSION_NUMBER](S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_install/#examples","text":"arduino-cli lib install AudioZero # for the latest version. arduino-cli lib install AudioZero@1.0.0 # for the specific version.","title":"Examples"},{"location":"commands/arduino-cli_lib_install/#options","text":"-h, --help help for install --no-deps Do not install dependencies.","title":"Options"},{"location":"commands/arduino-cli_lib_install/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_install/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_install/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_list/","text":"arduino-cli lib list \u00b6 Shows a list of all installed libraries. Synopsis \u00b6 Shows a list of all installed libraries. arduino-cli lib list [flags] Examples \u00b6 arduino-cli lib list Options \u00b6 --all Include built-in libraries (from platforms and IDE) in listing. -h, --help help for list --updatable List updatable libraries. Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib list"},{"location":"commands/arduino-cli_lib_list/#arduino-cli-lib-list","text":"Shows a list of all installed libraries.","title":"arduino-cli lib list"},{"location":"commands/arduino-cli_lib_list/#synopsis","text":"Shows a list of all installed libraries. arduino-cli lib list [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_list/#examples","text":"arduino-cli lib list","title":"Examples"},{"location":"commands/arduino-cli_lib_list/#options","text":"--all Include built-in libraries (from platforms and IDE) in listing. -h, --help help for list --updatable List updatable libraries.","title":"Options"},{"location":"commands/arduino-cli_lib_list/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_list/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_list/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_search/","text":"arduino-cli lib search \u00b6 Searches for one or more libraries data. Synopsis \u00b6 Search for one or more libraries data (case insensitive search). arduino-cli lib search [LIBRARY_NAME] [flags] Examples \u00b6 arduino-cli lib search audio Options \u00b6 -h, --help help for search --names Show library names only. Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib search"},{"location":"commands/arduino-cli_lib_search/#arduino-cli-lib-search","text":"Searches for one or more libraries data.","title":"arduino-cli lib search"},{"location":"commands/arduino-cli_lib_search/#synopsis","text":"Search for one or more libraries data (case insensitive search). arduino-cli lib search [LIBRARY_NAME] [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_search/#examples","text":"arduino-cli lib search audio","title":"Examples"},{"location":"commands/arduino-cli_lib_search/#options","text":"-h, --help help for search --names Show library names only.","title":"Options"},{"location":"commands/arduino-cli_lib_search/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_search/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_search/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_uninstall/","text":"arduino-cli lib uninstall \u00b6 Uninstalls one or more libraries. Synopsis \u00b6 Uninstalls one or more libraries. arduino-cli lib uninstall LIBRARY_NAME(S) [flags] Examples \u00b6 arduino-cli lib uninstall AudioZero Options \u00b6 -h, --help help for uninstall Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib uninstall"},{"location":"commands/arduino-cli_lib_uninstall/#arduino-cli-lib-uninstall","text":"Uninstalls one or more libraries.","title":"arduino-cli lib uninstall"},{"location":"commands/arduino-cli_lib_uninstall/#synopsis","text":"Uninstalls one or more libraries. arduino-cli lib uninstall LIBRARY_NAME(S) [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_uninstall/#examples","text":"arduino-cli lib uninstall AudioZero","title":"Examples"},{"location":"commands/arduino-cli_lib_uninstall/#options","text":"-h, --help help for uninstall","title":"Options"},{"location":"commands/arduino-cli_lib_uninstall/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_uninstall/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_uninstall/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_update-index/","text":"arduino-cli lib update-index \u00b6 Updates the libraries index. Synopsis \u00b6 Updates the libraries index to the latest version. arduino-cli lib update-index [flags] Examples \u00b6 arduino-cli lib update-index Options \u00b6 -h, --help help for update-index Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib update-index"},{"location":"commands/arduino-cli_lib_update-index/#arduino-cli-lib-update-index","text":"Updates the libraries index.","title":"arduino-cli lib update-index"},{"location":"commands/arduino-cli_lib_update-index/#synopsis","text":"Updates the libraries index to the latest version. arduino-cli lib update-index [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_update-index/#examples","text":"arduino-cli lib update-index","title":"Examples"},{"location":"commands/arduino-cli_lib_update-index/#options","text":"-h, --help help for update-index","title":"Options"},{"location":"commands/arduino-cli_lib_update-index/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_update-index/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_update-index/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_lib_upgrade/","text":"arduino-cli lib upgrade \u00b6 Upgrades installed libraries. Synopsis \u00b6 This command upgrades an installed library to the latest available version. Multiple libraries can be passed separated by a space. If no arguments are provided, the command will upgrade all the installed libraries where an update is available. arduino-cli lib upgrade [flags] Examples \u00b6 arduino-cli lib upgrade arduino-cli lib upgrade Audio arduino-cli lib upgrade Audio ArduinoJson Options \u00b6 -h, --help help for upgrade Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli lib - Arduino commands about libraries. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"lib upgrade"},{"location":"commands/arduino-cli_lib_upgrade/#arduino-cli-lib-upgrade","text":"Upgrades installed libraries.","title":"arduino-cli lib upgrade"},{"location":"commands/arduino-cli_lib_upgrade/#synopsis","text":"This command upgrades an installed library to the latest available version. Multiple libraries can be passed separated by a space. If no arguments are provided, the command will upgrade all the installed libraries where an update is available. arduino-cli lib upgrade [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_lib_upgrade/#examples","text":"arduino-cli lib upgrade arduino-cli lib upgrade Audio arduino-cli lib upgrade Audio ArduinoJson","title":"Examples"},{"location":"commands/arduino-cli_lib_upgrade/#options","text":"-h, --help help for upgrade","title":"Options"},{"location":"commands/arduino-cli_lib_upgrade/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_lib_upgrade/#see-also","text":"arduino-cli lib - Arduino commands about libraries.","title":"SEE ALSO"},{"location":"commands/arduino-cli_lib_upgrade/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_sketch/","text":"arduino-cli sketch \u00b6 Arduino CLI Sketch Commands. Synopsis \u00b6 Arduino CLI Sketch Commands. Examples \u00b6 arduino-cli sketch new MySketch Options \u00b6 -h, --help help for sketch Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. arduino-cli sketch new - Create a new Sketch Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"sketch"},{"location":"commands/arduino-cli_sketch/#arduino-cli-sketch","text":"Arduino CLI Sketch Commands.","title":"arduino-cli sketch"},{"location":"commands/arduino-cli_sketch/#synopsis","text":"Arduino CLI Sketch Commands.","title":"Synopsis"},{"location":"commands/arduino-cli_sketch/#examples","text":"arduino-cli sketch new MySketch","title":"Examples"},{"location":"commands/arduino-cli_sketch/#options","text":"-h, --help help for sketch","title":"Options"},{"location":"commands/arduino-cli_sketch/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch/#see-also","text":"arduino-cli - Arduino CLI. arduino-cli sketch new - Create a new Sketch","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_sketch_new/","text":"arduino-cli sketch new \u00b6 Create a new Sketch Synopsis \u00b6 Create a new Sketch arduino-cli sketch new [flags] Examples \u00b6 arduino-cli sketch new MultiBlinker Options \u00b6 -h, --help help for new Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli sketch - Arduino CLI Sketch Commands. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"sketch new"},{"location":"commands/arduino-cli_sketch_new/#arduino-cli-sketch-new","text":"Create a new Sketch","title":"arduino-cli sketch new"},{"location":"commands/arduino-cli_sketch_new/#synopsis","text":"Create a new Sketch arduino-cli sketch new [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_sketch_new/#examples","text":"arduino-cli sketch new MultiBlinker","title":"Examples"},{"location":"commands/arduino-cli_sketch_new/#options","text":"-h, --help help for new","title":"Options"},{"location":"commands/arduino-cli_sketch_new/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_sketch_new/#see-also","text":"arduino-cli sketch - Arduino CLI Sketch Commands.","title":"SEE ALSO"},{"location":"commands/arduino-cli_sketch_new/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_upload/","text":"arduino-cli upload \u00b6 Upload Arduino sketches. Synopsis \u00b6 Upload Arduino sketches. arduino-cli upload [flags] Examples \u00b6 arduino-cli upload /home/user/Arduino/MySketch Options \u00b6 -b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for upload -i, --input string Input file to be uploaded. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 -t, --verify Verify uploaded binary after the upload. Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"upload"},{"location":"commands/arduino-cli_upload/#arduino-cli-upload","text":"Upload Arduino sketches.","title":"arduino-cli upload"},{"location":"commands/arduino-cli_upload/#synopsis","text":"Upload Arduino sketches. arduino-cli upload [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_upload/#examples","text":"arduino-cli upload /home/user/Arduino/MySketch","title":"Examples"},{"location":"commands/arduino-cli_upload/#options","text":"-b, --fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno -h, --help help for upload -i, --input string Input file to be uploaded. -p, --port string Upload port, e.g.: COM10 or /dev/ttyACM0 -t, --verify Verify uploaded binary after the upload.","title":"Options"},{"location":"commands/arduino-cli_upload/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_upload/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_upload/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"commands/arduino-cli_version/","text":"arduino-cli version \u00b6 Shows version number of arduino CLI. Synopsis \u00b6 Shows version number of arduino CLI which is installed on your system. arduino-cli version [flags] Examples \u00b6 arduino-cli version Options \u00b6 -h, --help help for version Options inherited from parent commands \u00b6 --additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output. SEE ALSO \u00b6 arduino-cli - Arduino CLI. Auto generated by spf13/cobra on 2-Apr-2020 \u00b6","title":"version"},{"location":"commands/arduino-cli_version/#arduino-cli-version","text":"Shows version number of arduino CLI.","title":"arduino-cli version"},{"location":"commands/arduino-cli_version/#synopsis","text":"Shows version number of arduino CLI which is installed on your system. arduino-cli version [flags]","title":"Synopsis"},{"location":"commands/arduino-cli_version/#examples","text":"arduino-cli version","title":"Examples"},{"location":"commands/arduino-cli_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"commands/arduino-cli_version/#options-inherited-from-parent-commands","text":"--additional-urls strings Additional URLs for the board manager. --config-file string The custom config file (if not specified the default will be used). --format string The output format, can be [text|json]. (default \"text\") --log-file string Path to the file where logs will be written. --log-format string The output format for the logs, can be [text|json]. --log-level string Messages with this level and above will be logged. Valid levels are: Trace, Debug, Info, Warning, Error, Fatal, Panic -v, --verbose Print the logs on the standard output.","title":"Options inherited from parent commands"},{"location":"commands/arduino-cli_version/#see-also","text":"arduino-cli - Arduino CLI.","title":"SEE ALSO"},{"location":"commands/arduino-cli_version/#auto-generated-by-spf13cobra-on-2-apr-2020","text":"","title":"Auto generated by spf13/cobra on 2-Apr-2020"},{"location":"rpc/commands/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 commands/board.proto BoardAttachReq BoardAttachResp BoardDetailsReq BoardDetailsResp BoardListAllReq BoardListAllResp BoardListItem BoardListReq BoardListResp ConfigOption ConfigValue DetectedPort RequiredTool commands/commands.proto DestroyReq DestroyResp InitReq InitResp RescanReq RescanResp UpdateIndexReq UpdateIndexResp UpdateLibrariesIndexReq UpdateLibrariesIndexResp VersionReq VersionResp ArduinoCore commands/common.proto DownloadProgress Instance TaskProgress commands/compile.proto CompileReq CompileResp commands/core.proto Board Platform PlatformDownloadReq PlatformDownloadResp PlatformInstallReq PlatformInstallResp PlatformListReq PlatformListResp PlatformSearchReq PlatformSearchResp PlatformUninstallReq PlatformUninstallResp PlatformUpgradeReq PlatformUpgradeResp commands/lib.proto DownloadResource InstalledLibrary Library Library.PropertiesEntry LibraryDependency LibraryDependencyStatus LibraryDownloadReq LibraryDownloadResp LibraryInstallReq LibraryInstallResp LibraryListReq LibraryListResp LibraryRelease LibraryResolveDependenciesReq LibraryResolveDependenciesResp LibrarySearchReq LibrarySearchResp LibraryUninstallReq LibraryUninstallResp LibraryUpgradeAllReq LibraryUpgradeAllResp SearchedLibrary SearchedLibrary.ReleasesEntry LibraryLayout LibraryLocation LibrarySearchStatus commands/upload.proto UploadReq UploadResp Scalar Value Types Top commands/board.proto \u00b6 BoardAttachReq \u00b6 Field Type Label Description instance Instance board_uri string sketch_path string search_timeout string BoardAttachResp \u00b6 Field Type Label Description task_progress TaskProgress BoardDetailsReq \u00b6 Field Type Label Description instance Instance fqbn string BoardDetailsResp \u00b6 Field Type Label Description name string config_options ConfigOption repeated required_tools RequiredTool repeated BoardListAllReq \u00b6 Field Type Label Description instance Instance search_args string repeated BoardListAllResp \u00b6 Field Type Label Description boards BoardListItem repeated BoardListItem \u00b6 Field Type Label Description name string FQBN string BoardListReq \u00b6 Field Type Label Description instance Instance BoardListResp \u00b6 Field Type Label Description ports DetectedPort repeated ConfigOption \u00b6 Field Type Label Description option string option_label string values ConfigValue repeated ConfigValue \u00b6 Field Type Label Description value string value_label string selected bool DetectedPort \u00b6 Field Type Label Description address string protocol string protocol_label string boards BoardListItem repeated RequiredTool \u00b6 Field Type Label Description name string version string packager string Top commands/commands.proto \u00b6 DestroyReq \u00b6 Field Type Label Description instance Instance DestroyResp \u00b6 InitReq \u00b6 Field Type Label Description library_manager_only bool InitResp \u00b6 Field Type Label Description instance Instance platforms_index_errors string repeated libraries_index_error string download_progress DownloadProgress task_progress TaskProgress RescanReq \u00b6 Field Type Label Description instance Instance RescanResp \u00b6 Field Type Label Description platforms_index_errors string repeated libraries_index_error string UpdateIndexReq \u00b6 Field Type Label Description instance Instance UpdateIndexResp \u00b6 Field Type Label Description download_progress DownloadProgress UpdateLibrariesIndexReq \u00b6 Field Type Label Description instance Instance UpdateLibrariesIndexResp \u00b6 Field Type Label Description download_progress DownloadProgress VersionReq \u00b6 VersionResp \u00b6 Field Type Label Description version string ArduinoCore \u00b6 The main Arduino Platform Service BOOTSTRAP COMMANDS \u00b6 Method Name Request Type Response Type Description Init InitReq InitResp stream Start a new instance of the Arduino Core Service Destroy DestroyReq DestroyResp Destroy an instance of the Arduino Core Service Rescan RescanReq RescanResp Rescan instance of the Arduino Core Service UpdateIndex UpdateIndexReq UpdateIndexResp stream Update package index of the Arduino Core Service UpdateLibrariesIndex UpdateLibrariesIndexReq UpdateLibrariesIndexResp stream Update libraries index Version VersionReq VersionResp BoardDetails BoardDetailsReq BoardDetailsResp Requests details about a board BoardAttach BoardAttachReq BoardAttachResp stream BoardList BoardListReq BoardListResp BoardListAll BoardListAllReq BoardListAllResp Compile CompileReq CompileResp stream PlatformInstall PlatformInstallReq PlatformInstallResp stream PlatformDownload PlatformDownloadReq PlatformDownloadResp stream PlatformUninstall PlatformUninstallReq PlatformUninstallResp stream PlatformUpgrade PlatformUpgradeReq PlatformUpgradeResp stream Upload UploadReq UploadResp stream PlatformSearch PlatformSearchReq PlatformSearchResp PlatformList PlatformListReq PlatformListResp LibraryDownload LibraryDownloadReq LibraryDownloadResp stream LibraryInstall LibraryInstallReq LibraryInstallResp stream LibraryUninstall LibraryUninstallReq LibraryUninstallResp stream LibraryUpgradeAll LibraryUpgradeAllReq LibraryUpgradeAllResp stream LibraryResolveDependencies LibraryResolveDependenciesReq LibraryResolveDependenciesResp LibrarySearch LibrarySearchReq LibrarySearchResp LibraryList LibraryListReq LibraryListResp Top commands/common.proto \u00b6 DownloadProgress \u00b6 Field Type Label Description url string file string total_size int64 downloaded int64 completed bool Instance \u00b6 Field Type Label Description id int32 TaskProgress \u00b6 Field Type Label Description name string message string completed bool Top commands/compile.proto \u00b6 CompileReq \u00b6 Field Type Label Description instance Instance fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno. sketchPath string showProperties bool Show all build preferences used instead of compiling. preprocess bool Print preprocessed code to stdout. buildCachePath string Builds of 'core.a' are saved into this path to be cached and reused. buildPath string Path where to save compiled files. buildProperties string repeated List of custom build properties separated by commas. Or can be used multiple times for multiple properties. warnings string Used to tell gcc which warning level to use. verbose bool Turns on verbose mode. quiet bool Suppresses almost every output. vidPid string VID/PID specific build properties. exportFile string The compiled binary is written to this file jobs int32 The max number of concurrent compiler instances to run (as make -jx) libraries string repeated List of custom libraries paths separated by commas. Or can be used multiple times for multiple libraries paths. optimizeForDebug bool Optimize compile output for debug, not for release dryRun bool When set to true the compiled binary will not be copied to the export directory CompileResp \u00b6 Field Type Label Description out_stream bytes err_stream bytes Top commands/core.proto \u00b6 Board \u00b6 Field Type Label Description name string fqbn string Platform \u00b6 Field Type Label Description ID string Installed string Latest string Name string Maintainer string Website string Email string Boards Board repeated PlatformDownloadReq \u00b6 Field Type Label Description instance Instance platform_package string architecture string version string PlatformDownloadResp \u00b6 Field Type Label Description progress DownloadProgress PlatformInstallReq \u00b6 Field Type Label Description instance Instance platform_package string architecture string version string PlatformInstallResp \u00b6 Field Type Label Description progress DownloadProgress task_progress TaskProgress PlatformListReq \u00b6 Field Type Label Description instance Instance updatable_only bool PlatformListResp \u00b6 Field Type Label Description installed_platform Platform repeated PlatformSearchReq \u00b6 Field Type Label Description instance Instance search_args string all_versions bool PlatformSearchResp \u00b6 Field Type Label Description search_output Platform repeated PlatformUninstallReq \u00b6 Field Type Label Description instance Instance platform_package string architecture string PlatformUninstallResp \u00b6 Field Type Label Description task_progress TaskProgress PlatformUpgradeReq \u00b6 Field Type Label Description instance Instance platform_package string architecture string PlatformUpgradeResp \u00b6 Field Type Label Description progress DownloadProgress task_progress TaskProgress Top commands/lib.proto \u00b6 DownloadResource \u00b6 Field Type Label Description url string archivefilename string checksum string size int64 cachepath string InstalledLibrary \u00b6 Field Type Label Description library Library release LibraryRelease Library \u00b6 Field Type Label Description name string author string maintainer string sentence string paragraph string website string category string architectures string repeated types string repeated install_dir string source_dir string utility_dir string container_platform string real_name string dot_a_linkage bool precompiled bool ld_flags string is_legacy bool version string license string properties Library.PropertiesEntry repeated location LibraryLocation layout LibraryLayout Library.PropertiesEntry \u00b6 Field Type Label Description key string value string LibraryDependency \u00b6 Field Type Label Description name string version_constraint string LibraryDependencyStatus \u00b6 Field Type Label Description name string versionRequired string versionInstalled string LibraryDownloadReq \u00b6 Field Type Label Description instance Instance name string version string LibraryDownloadResp \u00b6 Field Type Label Description progress DownloadProgress LibraryInstallReq \u00b6 Field Type Label Description instance Instance name string version string LibraryInstallResp \u00b6 Field Type Label Description progress DownloadProgress task_progress TaskProgress LibraryListReq \u00b6 Field Type Label Description instance Instance all bool updatable bool LibraryListResp \u00b6 Field Type Label Description installed_library InstalledLibrary repeated LibraryRelease \u00b6 Field Type Label Description author string version string maintainer string sentence string paragraph string website string category string architectures string repeated types string repeated resources DownloadResource license string provides_includes string repeated dependencies LibraryDependency repeated LibraryResolveDependenciesReq \u00b6 Field Type Label Description instance Instance name string version string LibraryResolveDependenciesResp \u00b6 Field Type Label Description dependencies LibraryDependencyStatus repeated LibrarySearchReq \u00b6 Field Type Label Description instance Instance query string LibrarySearchResp \u00b6 Field Type Label Description libraries SearchedLibrary repeated status LibrarySearchStatus LibraryUninstallReq \u00b6 Field Type Label Description instance Instance name string version string LibraryUninstallResp \u00b6 Field Type Label Description task_progress TaskProgress LibraryUpgradeAllReq \u00b6 Field Type Label Description instance Instance LibraryUpgradeAllResp \u00b6 Field Type Label Description progress DownloadProgress task_progress TaskProgress SearchedLibrary \u00b6 Field Type Label Description name string releases SearchedLibrary.ReleasesEntry repeated latest LibraryRelease SearchedLibrary.ReleasesEntry \u00b6 Field Type Label Description key string value LibraryRelease LibraryLayout \u00b6 Name Number Description flat_layout 0 recursive_layout 1 LibraryLocation \u00b6 Name Number Description ide_builtin 0 user 1 (sketchbook) platform_builtin 2 referenced_platform_builtin 3 LibrarySearchStatus \u00b6 Name Number Description failed 0 success 1 Top commands/upload.proto \u00b6 UploadReq \u00b6 Field Type Label Description instance Instance fqbn string sketch_path string port string verbose bool verify bool import_file string UploadResp \u00b6 Field Type Label Description out_stream bytes err_stream bytes Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"commands"},{"location":"rpc/commands/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/commands/#table-of-contents","text":"commands/board.proto BoardAttachReq BoardAttachResp BoardDetailsReq BoardDetailsResp BoardListAllReq BoardListAllResp BoardListItem BoardListReq BoardListResp ConfigOption ConfigValue DetectedPort RequiredTool commands/commands.proto DestroyReq DestroyResp InitReq InitResp RescanReq RescanResp UpdateIndexReq UpdateIndexResp UpdateLibrariesIndexReq UpdateLibrariesIndexResp VersionReq VersionResp ArduinoCore commands/common.proto DownloadProgress Instance TaskProgress commands/compile.proto CompileReq CompileResp commands/core.proto Board Platform PlatformDownloadReq PlatformDownloadResp PlatformInstallReq PlatformInstallResp PlatformListReq PlatformListResp PlatformSearchReq PlatformSearchResp PlatformUninstallReq PlatformUninstallResp PlatformUpgradeReq PlatformUpgradeResp commands/lib.proto DownloadResource InstalledLibrary Library Library.PropertiesEntry LibraryDependency LibraryDependencyStatus LibraryDownloadReq LibraryDownloadResp LibraryInstallReq LibraryInstallResp LibraryListReq LibraryListResp LibraryRelease LibraryResolveDependenciesReq LibraryResolveDependenciesResp LibrarySearchReq LibrarySearchResp LibraryUninstallReq LibraryUninstallResp LibraryUpgradeAllReq LibraryUpgradeAllResp SearchedLibrary SearchedLibrary.ReleasesEntry LibraryLayout LibraryLocation LibrarySearchStatus commands/upload.proto UploadReq UploadResp Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/commands/#commandsboardproto","text":"","title":"commands/board.proto"},{"location":"rpc/commands/#boardattachreq","text":"Field Type Label Description instance Instance board_uri string sketch_path string search_timeout string","title":"BoardAttachReq"},{"location":"rpc/commands/#boardattachresp","text":"Field Type Label Description task_progress TaskProgress","title":"BoardAttachResp"},{"location":"rpc/commands/#boarddetailsreq","text":"Field Type Label Description instance Instance fqbn string","title":"BoardDetailsReq"},{"location":"rpc/commands/#boarddetailsresp","text":"Field Type Label Description name string config_options ConfigOption repeated required_tools RequiredTool repeated","title":"BoardDetailsResp"},{"location":"rpc/commands/#boardlistallreq","text":"Field Type Label Description instance Instance search_args string repeated","title":"BoardListAllReq"},{"location":"rpc/commands/#boardlistallresp","text":"Field Type Label Description boards BoardListItem repeated","title":"BoardListAllResp"},{"location":"rpc/commands/#boardlistitem","text":"Field Type Label Description name string FQBN string","title":"BoardListItem"},{"location":"rpc/commands/#boardlistreq","text":"Field Type Label Description instance Instance","title":"BoardListReq"},{"location":"rpc/commands/#boardlistresp","text":"Field Type Label Description ports DetectedPort repeated","title":"BoardListResp"},{"location":"rpc/commands/#configoption","text":"Field Type Label Description option string option_label string values ConfigValue repeated","title":"ConfigOption"},{"location":"rpc/commands/#configvalue","text":"Field Type Label Description value string value_label string selected bool","title":"ConfigValue"},{"location":"rpc/commands/#detectedport","text":"Field Type Label Description address string protocol string protocol_label string boards BoardListItem repeated","title":"DetectedPort"},{"location":"rpc/commands/#requiredtool","text":"Field Type Label Description name string version string packager string Top","title":"RequiredTool"},{"location":"rpc/commands/#commandscommandsproto","text":"","title":"commands/commands.proto"},{"location":"rpc/commands/#destroyreq","text":"Field Type Label Description instance Instance","title":"DestroyReq"},{"location":"rpc/commands/#destroyresp","text":"","title":"DestroyResp"},{"location":"rpc/commands/#initreq","text":"Field Type Label Description library_manager_only bool","title":"InitReq"},{"location":"rpc/commands/#initresp","text":"Field Type Label Description instance Instance platforms_index_errors string repeated libraries_index_error string download_progress DownloadProgress task_progress TaskProgress","title":"InitResp"},{"location":"rpc/commands/#rescanreq","text":"Field Type Label Description instance Instance","title":"RescanReq"},{"location":"rpc/commands/#rescanresp","text":"Field Type Label Description platforms_index_errors string repeated libraries_index_error string","title":"RescanResp"},{"location":"rpc/commands/#updateindexreq","text":"Field Type Label Description instance Instance","title":"UpdateIndexReq"},{"location":"rpc/commands/#updateindexresp","text":"Field Type Label Description download_progress DownloadProgress","title":"UpdateIndexResp"},{"location":"rpc/commands/#updatelibrariesindexreq","text":"Field Type Label Description instance Instance","title":"UpdateLibrariesIndexReq"},{"location":"rpc/commands/#updatelibrariesindexresp","text":"Field Type Label Description download_progress DownloadProgress","title":"UpdateLibrariesIndexResp"},{"location":"rpc/commands/#versionreq","text":"","title":"VersionReq"},{"location":"rpc/commands/#versionresp","text":"Field Type Label Description version string","title":"VersionResp"},{"location":"rpc/commands/#arduinocore","text":"The main Arduino Platform Service","title":"ArduinoCore"},{"location":"rpc/commands/#bootstrap-commands","text":"Method Name Request Type Response Type Description Init InitReq InitResp stream Start a new instance of the Arduino Core Service Destroy DestroyReq DestroyResp Destroy an instance of the Arduino Core Service Rescan RescanReq RescanResp Rescan instance of the Arduino Core Service UpdateIndex UpdateIndexReq UpdateIndexResp stream Update package index of the Arduino Core Service UpdateLibrariesIndex UpdateLibrariesIndexReq UpdateLibrariesIndexResp stream Update libraries index Version VersionReq VersionResp BoardDetails BoardDetailsReq BoardDetailsResp Requests details about a board BoardAttach BoardAttachReq BoardAttachResp stream BoardList BoardListReq BoardListResp BoardListAll BoardListAllReq BoardListAllResp Compile CompileReq CompileResp stream PlatformInstall PlatformInstallReq PlatformInstallResp stream PlatformDownload PlatformDownloadReq PlatformDownloadResp stream PlatformUninstall PlatformUninstallReq PlatformUninstallResp stream PlatformUpgrade PlatformUpgradeReq PlatformUpgradeResp stream Upload UploadReq UploadResp stream PlatformSearch PlatformSearchReq PlatformSearchResp PlatformList PlatformListReq PlatformListResp LibraryDownload LibraryDownloadReq LibraryDownloadResp stream LibraryInstall LibraryInstallReq LibraryInstallResp stream LibraryUninstall LibraryUninstallReq LibraryUninstallResp stream LibraryUpgradeAll LibraryUpgradeAllReq LibraryUpgradeAllResp stream LibraryResolveDependencies LibraryResolveDependenciesReq LibraryResolveDependenciesResp LibrarySearch LibrarySearchReq LibrarySearchResp LibraryList LibraryListReq LibraryListResp Top","title":"BOOTSTRAP COMMANDS"},{"location":"rpc/commands/#commandscommonproto","text":"","title":"commands/common.proto"},{"location":"rpc/commands/#downloadprogress","text":"Field Type Label Description url string file string total_size int64 downloaded int64 completed bool","title":"DownloadProgress"},{"location":"rpc/commands/#instance","text":"Field Type Label Description id int32","title":"Instance"},{"location":"rpc/commands/#taskprogress","text":"Field Type Label Description name string message string completed bool Top","title":"TaskProgress"},{"location":"rpc/commands/#commandscompileproto","text":"","title":"commands/compile.proto"},{"location":"rpc/commands/#compilereq","text":"Field Type Label Description instance Instance fqbn string Fully Qualified Board Name, e.g.: arduino:avr:uno. sketchPath string showProperties bool Show all build preferences used instead of compiling. preprocess bool Print preprocessed code to stdout. buildCachePath string Builds of 'core.a' are saved into this path to be cached and reused. buildPath string Path where to save compiled files. buildProperties string repeated List of custom build properties separated by commas. Or can be used multiple times for multiple properties. warnings string Used to tell gcc which warning level to use. verbose bool Turns on verbose mode. quiet bool Suppresses almost every output. vidPid string VID/PID specific build properties. exportFile string The compiled binary is written to this file jobs int32 The max number of concurrent compiler instances to run (as make -jx) libraries string repeated List of custom libraries paths separated by commas. Or can be used multiple times for multiple libraries paths. optimizeForDebug bool Optimize compile output for debug, not for release dryRun bool When set to true the compiled binary will not be copied to the export directory","title":"CompileReq"},{"location":"rpc/commands/#compileresp","text":"Field Type Label Description out_stream bytes err_stream bytes Top","title":"CompileResp"},{"location":"rpc/commands/#commandscoreproto","text":"","title":"commands/core.proto"},{"location":"rpc/commands/#board","text":"Field Type Label Description name string fqbn string","title":"Board"},{"location":"rpc/commands/#platform","text":"Field Type Label Description ID string Installed string Latest string Name string Maintainer string Website string Email string Boards Board repeated","title":"Platform"},{"location":"rpc/commands/#platformdownloadreq","text":"Field Type Label Description instance Instance platform_package string architecture string version string","title":"PlatformDownloadReq"},{"location":"rpc/commands/#platformdownloadresp","text":"Field Type Label Description progress DownloadProgress","title":"PlatformDownloadResp"},{"location":"rpc/commands/#platforminstallreq","text":"Field Type Label Description instance Instance platform_package string architecture string version string","title":"PlatformInstallReq"},{"location":"rpc/commands/#platforminstallresp","text":"Field Type Label Description progress DownloadProgress task_progress TaskProgress","title":"PlatformInstallResp"},{"location":"rpc/commands/#platformlistreq","text":"Field Type Label Description instance Instance updatable_only bool","title":"PlatformListReq"},{"location":"rpc/commands/#platformlistresp","text":"Field Type Label Description installed_platform Platform repeated","title":"PlatformListResp"},{"location":"rpc/commands/#platformsearchreq","text":"Field Type Label Description instance Instance search_args string all_versions bool","title":"PlatformSearchReq"},{"location":"rpc/commands/#platformsearchresp","text":"Field Type Label Description search_output Platform repeated","title":"PlatformSearchResp"},{"location":"rpc/commands/#platformuninstallreq","text":"Field Type Label Description instance Instance platform_package string architecture string","title":"PlatformUninstallReq"},{"location":"rpc/commands/#platformuninstallresp","text":"Field Type Label Description task_progress TaskProgress","title":"PlatformUninstallResp"},{"location":"rpc/commands/#platformupgradereq","text":"Field Type Label Description instance Instance platform_package string architecture string","title":"PlatformUpgradeReq"},{"location":"rpc/commands/#platformupgraderesp","text":"Field Type Label Description progress DownloadProgress task_progress TaskProgress Top","title":"PlatformUpgradeResp"},{"location":"rpc/commands/#commandslibproto","text":"","title":"commands/lib.proto"},{"location":"rpc/commands/#downloadresource","text":"Field Type Label Description url string archivefilename string checksum string size int64 cachepath string","title":"DownloadResource"},{"location":"rpc/commands/#installedlibrary","text":"Field Type Label Description library Library release LibraryRelease","title":"InstalledLibrary"},{"location":"rpc/commands/#library","text":"Field Type Label Description name string author string maintainer string sentence string paragraph string website string category string architectures string repeated types string repeated install_dir string source_dir string utility_dir string container_platform string real_name string dot_a_linkage bool precompiled bool ld_flags string is_legacy bool version string license string properties Library.PropertiesEntry repeated location LibraryLocation layout LibraryLayout","title":"Library"},{"location":"rpc/commands/#librarypropertiesentry","text":"Field Type Label Description key string value string","title":"Library.PropertiesEntry"},{"location":"rpc/commands/#librarydependency","text":"Field Type Label Description name string version_constraint string","title":"LibraryDependency"},{"location":"rpc/commands/#librarydependencystatus","text":"Field Type Label Description name string versionRequired string versionInstalled string","title":"LibraryDependencyStatus"},{"location":"rpc/commands/#librarydownloadreq","text":"Field Type Label Description instance Instance name string version string","title":"LibraryDownloadReq"},{"location":"rpc/commands/#librarydownloadresp","text":"Field Type Label Description progress DownloadProgress","title":"LibraryDownloadResp"},{"location":"rpc/commands/#libraryinstallreq","text":"Field Type Label Description instance Instance name string version string","title":"LibraryInstallReq"},{"location":"rpc/commands/#libraryinstallresp","text":"Field Type Label Description progress DownloadProgress task_progress TaskProgress","title":"LibraryInstallResp"},{"location":"rpc/commands/#librarylistreq","text":"Field Type Label Description instance Instance all bool updatable bool","title":"LibraryListReq"},{"location":"rpc/commands/#librarylistresp","text":"Field Type Label Description installed_library InstalledLibrary repeated","title":"LibraryListResp"},{"location":"rpc/commands/#libraryrelease","text":"Field Type Label Description author string version string maintainer string sentence string paragraph string website string category string architectures string repeated types string repeated resources DownloadResource license string provides_includes string repeated dependencies LibraryDependency repeated","title":"LibraryRelease"},{"location":"rpc/commands/#libraryresolvedependenciesreq","text":"Field Type Label Description instance Instance name string version string","title":"LibraryResolveDependenciesReq"},{"location":"rpc/commands/#libraryresolvedependenciesresp","text":"Field Type Label Description dependencies LibraryDependencyStatus repeated","title":"LibraryResolveDependenciesResp"},{"location":"rpc/commands/#librarysearchreq","text":"Field Type Label Description instance Instance query string","title":"LibrarySearchReq"},{"location":"rpc/commands/#librarysearchresp","text":"Field Type Label Description libraries SearchedLibrary repeated status LibrarySearchStatus","title":"LibrarySearchResp"},{"location":"rpc/commands/#libraryuninstallreq","text":"Field Type Label Description instance Instance name string version string","title":"LibraryUninstallReq"},{"location":"rpc/commands/#libraryuninstallresp","text":"Field Type Label Description task_progress TaskProgress","title":"LibraryUninstallResp"},{"location":"rpc/commands/#libraryupgradeallreq","text":"Field Type Label Description instance Instance","title":"LibraryUpgradeAllReq"},{"location":"rpc/commands/#libraryupgradeallresp","text":"Field Type Label Description progress DownloadProgress task_progress TaskProgress","title":"LibraryUpgradeAllResp"},{"location":"rpc/commands/#searchedlibrary","text":"Field Type Label Description name string releases SearchedLibrary.ReleasesEntry repeated latest LibraryRelease","title":"SearchedLibrary"},{"location":"rpc/commands/#searchedlibraryreleasesentry","text":"Field Type Label Description key string value LibraryRelease","title":"SearchedLibrary.ReleasesEntry"},{"location":"rpc/commands/#librarylayout","text":"Name Number Description flat_layout 0 recursive_layout 1","title":"LibraryLayout"},{"location":"rpc/commands/#librarylocation","text":"Name Number Description ide_builtin 0 user 1 (sketchbook) platform_builtin 2 referenced_platform_builtin 3","title":"LibraryLocation"},{"location":"rpc/commands/#librarysearchstatus","text":"Name Number Description failed 0 success 1 Top","title":"LibrarySearchStatus"},{"location":"rpc/commands/#commandsuploadproto","text":"","title":"commands/upload.proto"},{"location":"rpc/commands/#uploadreq","text":"Field Type Label Description instance Instance fqbn string sketch_path string port string verbose bool verify bool import_file string","title":"UploadReq"},{"location":"rpc/commands/#uploadresp","text":"Field Type Label Description out_stream bytes err_stream bytes","title":"UploadResp"},{"location":"rpc/commands/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"rpc/debug/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 debug/debug.proto DebugConfigReq DebugReq DebugResp Debug Scalar Value Types Top debug/debug.proto \u00b6 DebugConfigReq \u00b6 Field Type Label Description instance cc.arduino.cli.commands.Instance fqbn string sketch_path string port string interpreter string verbose bool import_file string DebugReq \u00b6 The top-level message sent by the client for the Debug method. Multiple DebugReq messages can be sent but the first message must contain a DebugReq message to initialize the debug session. All subsequent messages must contain bytes to be sent to the debug session and must not contain a DebugReq message. Content must be either a debug session config or data to be sent. Field Type Label Description debugReq DebugConfigReq Provides information to the debug that specifies which is the target. The first StreamingOpenReq message must contain a DebugReq message. data bytes The data to be sent to the target being monitored. send_interrupt bool Set this to true to send and Interrupt signal to the debugger process DebugResp \u00b6 Field Type Label Description data bytes error string Debug \u00b6 Service that abstract a debug Session usage Method Name Request Type Response Type Description Debug DebugReq stream DebugResp stream Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"debug"},{"location":"rpc/debug/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/debug/#table-of-contents","text":"debug/debug.proto DebugConfigReq DebugReq DebugResp Debug Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/debug/#debugdebugproto","text":"","title":"debug/debug.proto"},{"location":"rpc/debug/#debugconfigreq","text":"Field Type Label Description instance cc.arduino.cli.commands.Instance fqbn string sketch_path string port string interpreter string verbose bool import_file string","title":"DebugConfigReq"},{"location":"rpc/debug/#debugreq","text":"The top-level message sent by the client for the Debug method. Multiple DebugReq messages can be sent but the first message must contain a DebugReq message to initialize the debug session. All subsequent messages must contain bytes to be sent to the debug session and must not contain a DebugReq message. Content must be either a debug session config or data to be sent. Field Type Label Description debugReq DebugConfigReq Provides information to the debug that specifies which is the target. The first StreamingOpenReq message must contain a DebugReq message. data bytes The data to be sent to the target being monitored. send_interrupt bool Set this to true to send and Interrupt signal to the debugger process","title":"DebugReq"},{"location":"rpc/debug/#debugresp","text":"Field Type Label Description data bytes error string","title":"DebugResp"},{"location":"rpc/debug/#debug","text":"Service that abstract a debug Session usage Method Name Request Type Response Type Description Debug DebugReq stream DebugResp stream","title":"Debug"},{"location":"rpc/debug/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"rpc/monitor/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 monitor/monitor.proto MonitorConfig StreamingOpenReq StreamingOpenResp MonitorConfig.TargetType Monitor Scalar Value Types Top monitor/monitor.proto \u00b6 MonitorConfig \u00b6 Tells the monitor which target to open and provides additional parameters that might be needed to configure the target or the monitor itself. Field Type Label Description target string type MonitorConfig.TargetType additionalConfig google.protobuf.Struct StreamingOpenReq \u00b6 The top-level message sent by the client for the StreamingOpen method. Multiple StreamingOpenReq messages can be sent but the first message must contain a monitor_config message to initialize the monitor target. All subsequent messages must contain bytes to be sent to the target and must not contain a monitor_config message. Field Type Label Description monitorConfig MonitorConfig Provides information to the monitor that specifies which is the target. The first StreamingOpenReq message must contain a monitor_config message. data bytes The data to be sent to the target being monitored. StreamingOpenResp \u00b6 Field Type Label Description data bytes MonitorConfig.TargetType \u00b6 Name Number Description SERIAL 0 Monitor \u00b6 Service that abstract a Monitor usage Method Name Request Type Response Type Description StreamingOpen StreamingOpenReq stream StreamingOpenResp stream Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"monitor"},{"location":"rpc/monitor/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/monitor/#table-of-contents","text":"monitor/monitor.proto MonitorConfig StreamingOpenReq StreamingOpenResp MonitorConfig.TargetType Monitor Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/monitor/#monitormonitorproto","text":"","title":"monitor/monitor.proto"},{"location":"rpc/monitor/#monitorconfig","text":"Tells the monitor which target to open and provides additional parameters that might be needed to configure the target or the monitor itself. Field Type Label Description target string type MonitorConfig.TargetType additionalConfig google.protobuf.Struct","title":"MonitorConfig"},{"location":"rpc/monitor/#streamingopenreq","text":"The top-level message sent by the client for the StreamingOpen method. Multiple StreamingOpenReq messages can be sent but the first message must contain a monitor_config message to initialize the monitor target. All subsequent messages must contain bytes to be sent to the target and must not contain a monitor_config message. Field Type Label Description monitorConfig MonitorConfig Provides information to the monitor that specifies which is the target. The first StreamingOpenReq message must contain a monitor_config message. data bytes The data to be sent to the target being monitored.","title":"StreamingOpenReq"},{"location":"rpc/monitor/#streamingopenresp","text":"Field Type Label Description data bytes","title":"StreamingOpenResp"},{"location":"rpc/monitor/#monitorconfigtargettype","text":"Name Number Description SERIAL 0","title":"MonitorConfig.TargetType"},{"location":"rpc/monitor/#monitor","text":"Service that abstract a Monitor usage Method Name Request Type Response Type Description StreamingOpen StreamingOpenReq stream StreamingOpenResp stream","title":"Monitor"},{"location":"rpc/monitor/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"},{"location":"rpc/settings/","text":"Protocol Documentation \u00b6 Table of Contents \u00b6 settings/settings.proto GetAllRequest GetValueRequest MergeResponse RawData SetValueResponse Value Settings Scalar Value Types Top settings/settings.proto \u00b6 GetAllRequest \u00b6 GetValueRequest \u00b6 Field Type Label Description key string MergeResponse \u00b6 RawData \u00b6 Field Type Label Description jsonData string SetValueResponse \u00b6 Value \u00b6 Field Type Label Description key string jsonData string Settings \u00b6 Method Name Request Type Response Type Description GetAll GetAllRequest RawData Merge RawData MergeResponse GetValue GetValueRequest Value SetValue Value SetValueResponse Scalar Value Types \u00b6 .proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"settings"},{"location":"rpc/settings/#protocol-documentation","text":"","title":"Protocol Documentation"},{"location":"rpc/settings/#table-of-contents","text":"settings/settings.proto GetAllRequest GetValueRequest MergeResponse RawData SetValueResponse Value Settings Scalar Value Types Top","title":"Table of Contents"},{"location":"rpc/settings/#settingssettingsproto","text":"","title":"settings/settings.proto"},{"location":"rpc/settings/#getallrequest","text":"","title":"GetAllRequest"},{"location":"rpc/settings/#getvaluerequest","text":"Field Type Label Description key string","title":"GetValueRequest"},{"location":"rpc/settings/#mergeresponse","text":"","title":"MergeResponse"},{"location":"rpc/settings/#rawdata","text":"Field Type Label Description jsonData string","title":"RawData"},{"location":"rpc/settings/#setvalueresponse","text":"","title":"SetValueResponse"},{"location":"rpc/settings/#value","text":"Field Type Label Description key string jsonData string","title":"Value"},{"location":"rpc/settings/#settings","text":"Method Name Request Type Response Type Description GetAll GetAllRequest RawData Merge RawData MergeResponse GetValue GetValueRequest Value SetValue Value SetValueResponse","title":"Settings"},{"location":"rpc/settings/#scalar-value-types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby double double double float float64 double float Float float float float float float32 float float Float int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required) int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required) uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required) sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required) sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required) fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required) sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum bool bool boolean boolean bool bool boolean TrueClass/FalseClass string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8) bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)","title":"Scalar Value Types"}]}